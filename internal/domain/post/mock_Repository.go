// Code generated by mockery v2.52.2. DO NOT EDIT.

package post

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// AddSocialMediaPublisher provides a mock function with given fields: ctx, postID, publisherID
func (_m *MockRepository) AddSocialMediaPublisher(ctx context.Context, postID string, publisherID string) error {
	ret := _m.Called(ctx, postID, publisherID)

	if len(ret) == 0 {
		panic("no return value specified for AddSocialMediaPublisher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, postID, publisherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_AddSocialMediaPublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSocialMediaPublisher'
type MockRepository_AddSocialMediaPublisher_Call struct {
	*mock.Call
}

// AddSocialMediaPublisher is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
//   - publisherID string
func (_e *MockRepository_Expecter) AddSocialMediaPublisher(ctx interface{}, postID interface{}, publisherID interface{}) *MockRepository_AddSocialMediaPublisher_Call {
	return &MockRepository_AddSocialMediaPublisher_Call{Call: _e.mock.On("AddSocialMediaPublisher", ctx, postID, publisherID)}
}

func (_c *MockRepository_AddSocialMediaPublisher_Call) Run(run func(ctx context.Context, postID string, publisherID string)) *MockRepository_AddSocialMediaPublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_AddSocialMediaPublisher_Call) Return(_a0 error) *MockRepository_AddSocialMediaPublisher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_AddSocialMediaPublisher_Call) RunAndReturn(run func(context.Context, string, string) error) *MockRepository_AddSocialMediaPublisher_Call {
	_c.Call.Return(run)
	return _c
}

// AddToProjectIdeaQueue provides a mock function with given fields: ctx, projectID, postID
func (_m *MockRepository) AddToProjectIdeaQueue(ctx context.Context, projectID string, postID string) error {
	ret := _m.Called(ctx, projectID, postID)

	if len(ret) == 0 {
		panic("no return value specified for AddToProjectIdeaQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_AddToProjectIdeaQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToProjectIdeaQueue'
type MockRepository_AddToProjectIdeaQueue_Call struct {
	*mock.Call
}

// AddToProjectIdeaQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
func (_e *MockRepository_Expecter) AddToProjectIdeaQueue(ctx interface{}, projectID interface{}, postID interface{}) *MockRepository_AddToProjectIdeaQueue_Call {
	return &MockRepository_AddToProjectIdeaQueue_Call{Call: _e.mock.On("AddToProjectIdeaQueue", ctx, projectID, postID)}
}

func (_c *MockRepository_AddToProjectIdeaQueue_Call) Run(run func(ctx context.Context, projectID string, postID string)) *MockRepository_AddToProjectIdeaQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_AddToProjectIdeaQueue_Call) Return(_a0 error) *MockRepository_AddToProjectIdeaQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_AddToProjectIdeaQueue_Call) RunAndReturn(run func(context.Context, string, string) error) *MockRepository_AddToProjectIdeaQueue_Call {
	_c.Call.Return(run)
	return _c
}

// AddToProjectQueue provides a mock function with given fields: ctx, projectID, postID
func (_m *MockRepository) AddToProjectQueue(ctx context.Context, projectID string, postID string) error {
	ret := _m.Called(ctx, projectID, postID)

	if len(ret) == 0 {
		panic("no return value specified for AddToProjectQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_AddToProjectQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToProjectQueue'
type MockRepository_AddToProjectQueue_Call struct {
	*mock.Call
}

// AddToProjectQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
func (_e *MockRepository_Expecter) AddToProjectQueue(ctx interface{}, projectID interface{}, postID interface{}) *MockRepository_AddToProjectQueue_Call {
	return &MockRepository_AddToProjectQueue_Call{Call: _e.mock.On("AddToProjectQueue", ctx, projectID, postID)}
}

func (_c *MockRepository_AddToProjectQueue_Call) Run(run func(ctx context.Context, projectID string, postID string)) *MockRepository_AddToProjectQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_AddToProjectQueue_Call) Return(_a0 error) *MockRepository_AddToProjectQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_AddToProjectQueue_Call) RunAndReturn(run func(context.Context, string, string) error) *MockRepository_AddToProjectQueue_Call {
	_c.Call.Return(run)
	return _c
}

// ArchivePost provides a mock function with given fields: ctx, id
func (_m *MockRepository) ArchivePost(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ArchivePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_ArchivePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArchivePost'
type MockRepository_ArchivePost_Call struct {
	*mock.Call
}

// ArchivePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockRepository_Expecter) ArchivePost(ctx interface{}, id interface{}) *MockRepository_ArchivePost_Call {
	return &MockRepository_ArchivePost_Call{Call: _e.mock.On("ArchivePost", ctx, id)}
}

func (_c *MockRepository_ArchivePost_Call) Run(run func(ctx context.Context, id string)) *MockRepository_ArchivePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_ArchivePost_Call) Return(_a0 error) *MockRepository_ArchivePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_ArchivePost_Call) RunAndReturn(run func(context.Context, string) error) *MockRepository_ArchivePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function with given fields: ctx, id
func (_m *MockRepository) DeletePost(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type MockRepository_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockRepository_Expecter) DeletePost(ctx interface{}, id interface{}) *MockRepository_DeletePost_Call {
	return &MockRepository_DeletePost_Call{Call: _e.mock.On("DeletePost", ctx, id)}
}

func (_c *MockRepository_DeletePost_Call) Run(run func(ctx context.Context, id string)) *MockRepository_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_DeletePost_Call) Return(_a0 error) *MockRepository_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeletePost_Call) RunAndReturn(run func(context.Context, string) error) *MockRepository_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) FindByID(ctx context.Context, id string) (*Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockRepository_Expecter) FindByID(ctx interface{}, id interface{}) *MockRepository_FindByID_Call {
	return &MockRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockRepository_FindByID_Call) Run(run func(ctx context.Context, id string)) *MockRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_FindByID_Call) Return(_a0 *Post, _a1 error) *MockRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindByID_Call) RunAndReturn(run func(context.Context, string) (*Post, error)) *MockRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByProjectID provides a mock function with given fields: ctx, projecID
func (_m *MockRepository) FindByProjectID(ctx context.Context, projecID string) ([]*Post, error) {
	ret := _m.Called(ctx, projecID)

	if len(ret) == 0 {
		panic("no return value specified for FindByProjectID")
	}

	var r0 []*Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*Post, error)); ok {
		return rf(ctx, projecID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*Post); ok {
		r0 = rf(ctx, projecID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projecID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByProjectID'
type MockRepository_FindByProjectID_Call struct {
	*mock.Call
}

// FindByProjectID is a helper method to define mock.On call
//   - ctx context.Context
//   - projecID string
func (_e *MockRepository_Expecter) FindByProjectID(ctx interface{}, projecID interface{}) *MockRepository_FindByProjectID_Call {
	return &MockRepository_FindByProjectID_Call{Call: _e.mock.On("FindByProjectID", ctx, projecID)}
}

func (_c *MockRepository_FindByProjectID_Call) Run(run func(ctx context.Context, projecID string)) *MockRepository_FindByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_FindByProjectID_Call) Return(_a0 []*Post, _a1 error) *MockRepository_FindByProjectID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindByProjectID_Call) RunAndReturn(run func(context.Context, string) ([]*Post, error)) *MockRepository_FindByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// FindScheduledReadyPosts provides a mock function with given fields: ctx, offset, chunksize
func (_m *MockRepository) FindScheduledReadyPosts(ctx context.Context, offset int, chunksize int) ([]*PublishPost, error) {
	ret := _m.Called(ctx, offset, chunksize)

	if len(ret) == 0 {
		panic("no return value specified for FindScheduledReadyPosts")
	}

	var r0 []*PublishPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*PublishPost, error)); ok {
		return rf(ctx, offset, chunksize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*PublishPost); ok {
		r0 = rf(ctx, offset, chunksize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*PublishPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, chunksize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindScheduledReadyPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindScheduledReadyPosts'
type MockRepository_FindScheduledReadyPosts_Call struct {
	*mock.Call
}

// FindScheduledReadyPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
//   - chunksize int
func (_e *MockRepository_Expecter) FindScheduledReadyPosts(ctx interface{}, offset interface{}, chunksize interface{}) *MockRepository_FindScheduledReadyPosts_Call {
	return &MockRepository_FindScheduledReadyPosts_Call{Call: _e.mock.On("FindScheduledReadyPosts", ctx, offset, chunksize)}
}

func (_c *MockRepository_FindScheduledReadyPosts_Call) Run(run func(ctx context.Context, offset int, chunksize int)) *MockRepository_FindScheduledReadyPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockRepository_FindScheduledReadyPosts_Call) Return(_a0 []*PublishPost, _a1 error) *MockRepository_FindScheduledReadyPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindScheduledReadyPosts_Call) RunAndReturn(run func(context.Context, int, int) ([]*PublishPost, error)) *MockRepository_FindScheduledReadyPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostToPublish provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetPostToPublish(ctx context.Context, id string) (*PublishPost, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostToPublish")
	}

	var r0 *PublishPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*PublishPost, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *PublishPost); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PublishPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetPostToPublish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostToPublish'
type MockRepository_GetPostToPublish_Call struct {
	*mock.Call
}

// GetPostToPublish is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockRepository_Expecter) GetPostToPublish(ctx interface{}, id interface{}) *MockRepository_GetPostToPublish_Call {
	return &MockRepository_GetPostToPublish_Call{Call: _e.mock.On("GetPostToPublish", ctx, id)}
}

func (_c *MockRepository_GetPostToPublish_Call) Run(run func(ctx context.Context, id string)) *MockRepository_GetPostToPublish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetPostToPublish_Call) Return(_a0 *PublishPost, _a1 error) *MockRepository_GetPostToPublish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetPostToPublish_Call) RunAndReturn(run func(context.Context, string) (*PublishPost, error)) *MockRepository_GetPostToPublish_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostsForPublishQueue provides a mock function with given fields: ctx, postID
func (_m *MockRepository) GetPostsForPublishQueue(ctx context.Context, postID string) ([]*PublishPost, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsForPublishQueue")
	}

	var r0 []*PublishPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*PublishPost, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*PublishPost); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*PublishPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetPostsForPublishQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsForPublishQueue'
type MockRepository_GetPostsForPublishQueue_Call struct {
	*mock.Call
}

// GetPostsForPublishQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
func (_e *MockRepository_Expecter) GetPostsForPublishQueue(ctx interface{}, postID interface{}) *MockRepository_GetPostsForPublishQueue_Call {
	return &MockRepository_GetPostsForPublishQueue_Call{Call: _e.mock.On("GetPostsForPublishQueue", ctx, postID)}
}

func (_c *MockRepository_GetPostsForPublishQueue_Call) Run(run func(ctx context.Context, postID string)) *MockRepository_GetPostsForPublishQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetPostsForPublishQueue_Call) Return(_a0 []*PublishPost, _a1 error) *MockRepository_GetPostsForPublishQueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetPostsForPublishQueue_Call) RunAndReturn(run func(context.Context, string) ([]*PublishPost, error)) *MockRepository_GetPostsForPublishQueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectIdeaQueue provides a mock function with given fields: ctx, projectID
func (_m *MockRepository) GetProjectIdeaQueue(ctx context.Context, projectID string) (*Queue, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectIdeaQueue")
	}

	var r0 *Queue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Queue, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Queue); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Queue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetProjectIdeaQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectIdeaQueue'
type MockRepository_GetProjectIdeaQueue_Call struct {
	*mock.Call
}

// GetProjectIdeaQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockRepository_Expecter) GetProjectIdeaQueue(ctx interface{}, projectID interface{}) *MockRepository_GetProjectIdeaQueue_Call {
	return &MockRepository_GetProjectIdeaQueue_Call{Call: _e.mock.On("GetProjectIdeaQueue", ctx, projectID)}
}

func (_c *MockRepository_GetProjectIdeaQueue_Call) Run(run func(ctx context.Context, projectID string)) *MockRepository_GetProjectIdeaQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetProjectIdeaQueue_Call) Return(_a0 *Queue, _a1 error) *MockRepository_GetProjectIdeaQueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetProjectIdeaQueue_Call) RunAndReturn(run func(context.Context, string) (*Queue, error)) *MockRepository_GetProjectIdeaQueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectPostQueue provides a mock function with given fields: ctx, projectID
func (_m *MockRepository) GetProjectPostQueue(ctx context.Context, projectID string) (*Queue, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectPostQueue")
	}

	var r0 *Queue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Queue, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Queue); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Queue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetProjectPostQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectPostQueue'
type MockRepository_GetProjectPostQueue_Call struct {
	*mock.Call
}

// GetProjectPostQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockRepository_Expecter) GetProjectPostQueue(ctx interface{}, projectID interface{}) *MockRepository_GetProjectPostQueue_Call {
	return &MockRepository_GetProjectPostQueue_Call{Call: _e.mock.On("GetProjectPostQueue", ctx, projectID)}
}

func (_c *MockRepository_GetProjectPostQueue_Call) Run(run func(ctx context.Context, projectID string)) *MockRepository_GetProjectPostQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetProjectPostQueue_Call) Return(_a0 *Queue, _a1 error) *MockRepository_GetProjectPostQueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetProjectPostQueue_Call) RunAndReturn(run func(context.Context, string) (*Queue, error)) *MockRepository_GetProjectPostQueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectQueuedPosts provides a mock function with given fields: ctx, projectID, postIDs
func (_m *MockRepository) GetProjectQueuedPosts(ctx context.Context, projectID string, postIDs []string) ([]*Post, error) {
	ret := _m.Called(ctx, projectID, postIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectQueuedPosts")
	}

	var r0 []*Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]*Post, error)); ok {
		return rf(ctx, projectID, postIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []*Post); ok {
		r0 = rf(ctx, projectID, postIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, projectID, postIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetProjectQueuedPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectQueuedPosts'
type MockRepository_GetProjectQueuedPosts_Call struct {
	*mock.Call
}

// GetProjectQueuedPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postIDs []string
func (_e *MockRepository_Expecter) GetProjectQueuedPosts(ctx interface{}, projectID interface{}, postIDs interface{}) *MockRepository_GetProjectQueuedPosts_Call {
	return &MockRepository_GetProjectQueuedPosts_Call{Call: _e.mock.On("GetProjectQueuedPosts", ctx, projectID, postIDs)}
}

func (_c *MockRepository_GetProjectQueuedPosts_Call) Run(run func(ctx context.Context, projectID string, postIDs []string)) *MockRepository_GetProjectQueuedPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_GetProjectQueuedPosts_Call) Return(_a0 []*Post, _a1 error) *MockRepository_GetProjectQueuedPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetProjectQueuedPosts_Call) RunAndReturn(run func(context.Context, string, []string) ([]*Post, error)) *MockRepository_GetProjectQueuedPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetSocialMediaPlatforms provides a mock function with given fields: ctx, postID
func (_m *MockRepository) GetSocialMediaPlatforms(ctx context.Context, postID string) ([]Platform, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetSocialMediaPlatforms")
	}

	var r0 []Platform
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]Platform, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []Platform); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Platform)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetSocialMediaPlatforms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSocialMediaPlatforms'
type MockRepository_GetSocialMediaPlatforms_Call struct {
	*mock.Call
}

// GetSocialMediaPlatforms is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
func (_e *MockRepository_Expecter) GetSocialMediaPlatforms(ctx interface{}, postID interface{}) *MockRepository_GetSocialMediaPlatforms_Call {
	return &MockRepository_GetSocialMediaPlatforms_Call{Call: _e.mock.On("GetSocialMediaPlatforms", ctx, postID)}
}

func (_c *MockRepository_GetSocialMediaPlatforms_Call) Run(run func(ctx context.Context, postID string)) *MockRepository_GetSocialMediaPlatforms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetSocialMediaPlatforms_Call) Return(_a0 []Platform, _a1 error) *MockRepository_GetSocialMediaPlatforms_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetSocialMediaPlatforms_Call) RunAndReturn(run func(context.Context, string) ([]Platform, error)) *MockRepository_GetSocialMediaPlatforms_Call {
	_c.Call.Return(run)
	return _c
}

// GetSocialMediaPublishersIDs provides a mock function with given fields: ctx, postID
func (_m *MockRepository) GetSocialMediaPublishersIDs(ctx context.Context, postID string) ([]string, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetSocialMediaPublishersIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetSocialMediaPublishersIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSocialMediaPublishersIDs'
type MockRepository_GetSocialMediaPublishersIDs_Call struct {
	*mock.Call
}

// GetSocialMediaPublishersIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
func (_e *MockRepository_Expecter) GetSocialMediaPublishersIDs(ctx interface{}, postID interface{}) *MockRepository_GetSocialMediaPublishersIDs_Call {
	return &MockRepository_GetSocialMediaPublishersIDs_Call{Call: _e.mock.On("GetSocialMediaPublishersIDs", ctx, postID)}
}

func (_c *MockRepository_GetSocialMediaPublishersIDs_Call) Run(run func(ctx context.Context, postID string)) *MockRepository_GetSocialMediaPublishersIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetSocialMediaPublishersIDs_Call) Return(_a0 []string, _a1 error) *MockRepository_GetSocialMediaPublishersIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetSocialMediaPublishersIDs_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *MockRepository_GetSocialMediaPublishersIDs_Call {
	_c.Call.Return(run)
	return _c
}

// IsPublisherPlatformEnabledForProject provides a mock function with given fields: ctx, projectID, publisherID
func (_m *MockRepository) IsPublisherPlatformEnabledForProject(ctx context.Context, projectID string, publisherID string) (bool, error) {
	ret := _m.Called(ctx, projectID, publisherID)

	if len(ret) == 0 {
		panic("no return value specified for IsPublisherPlatformEnabledForProject")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, projectID, publisherID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, projectID, publisherID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, publisherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_IsPublisherPlatformEnabledForProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPublisherPlatformEnabledForProject'
type MockRepository_IsPublisherPlatformEnabledForProject_Call struct {
	*mock.Call
}

// IsPublisherPlatformEnabledForProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - publisherID string
func (_e *MockRepository_Expecter) IsPublisherPlatformEnabledForProject(ctx interface{}, projectID interface{}, publisherID interface{}) *MockRepository_IsPublisherPlatformEnabledForProject_Call {
	return &MockRepository_IsPublisherPlatformEnabledForProject_Call{Call: _e.mock.On("IsPublisherPlatformEnabledForProject", ctx, projectID, publisherID)}
}

func (_c *MockRepository_IsPublisherPlatformEnabledForProject_Call) Run(run func(ctx context.Context, projectID string, publisherID string)) *MockRepository_IsPublisherPlatformEnabledForProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_IsPublisherPlatformEnabledForProject_Call) Return(_a0 bool, _a1 error) *MockRepository_IsPublisherPlatformEnabledForProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_IsPublisherPlatformEnabledForProject_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockRepository_IsPublisherPlatformEnabledForProject_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFromProjectIdeaQueue provides a mock function with given fields: ctx, projectID, postID
func (_m *MockRepository) RemoveFromProjectIdeaQueue(ctx context.Context, projectID string, postID string) error {
	ret := _m.Called(ctx, projectID, postID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFromProjectIdeaQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_RemoveFromProjectIdeaQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFromProjectIdeaQueue'
type MockRepository_RemoveFromProjectIdeaQueue_Call struct {
	*mock.Call
}

// RemoveFromProjectIdeaQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
func (_e *MockRepository_Expecter) RemoveFromProjectIdeaQueue(ctx interface{}, projectID interface{}, postID interface{}) *MockRepository_RemoveFromProjectIdeaQueue_Call {
	return &MockRepository_RemoveFromProjectIdeaQueue_Call{Call: _e.mock.On("RemoveFromProjectIdeaQueue", ctx, projectID, postID)}
}

func (_c *MockRepository_RemoveFromProjectIdeaQueue_Call) Run(run func(ctx context.Context, projectID string, postID string)) *MockRepository_RemoveFromProjectIdeaQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_RemoveFromProjectIdeaQueue_Call) Return(_a0 error) *MockRepository_RemoveFromProjectIdeaQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_RemoveFromProjectIdeaQueue_Call) RunAndReturn(run func(context.Context, string, string) error) *MockRepository_RemoveFromProjectIdeaQueue_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFromProjectQueue provides a mock function with given fields: ctx, projectID, postID
func (_m *MockRepository) RemoveFromProjectQueue(ctx context.Context, projectID string, postID string) error {
	ret := _m.Called(ctx, projectID, postID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFromProjectQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_RemoveFromProjectQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFromProjectQueue'
type MockRepository_RemoveFromProjectQueue_Call struct {
	*mock.Call
}

// RemoveFromProjectQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
func (_e *MockRepository_Expecter) RemoveFromProjectQueue(ctx interface{}, projectID interface{}, postID interface{}) *MockRepository_RemoveFromProjectQueue_Call {
	return &MockRepository_RemoveFromProjectQueue_Call{Call: _e.mock.On("RemoveFromProjectQueue", ctx, projectID, postID)}
}

func (_c *MockRepository_RemoveFromProjectQueue_Call) Run(run func(ctx context.Context, projectID string, postID string)) *MockRepository_RemoveFromProjectQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_RemoveFromProjectQueue_Call) Return(_a0 error) *MockRepository_RemoveFromProjectQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_RemoveFromProjectQueue_Call) RunAndReturn(run func(context.Context, string, string) error) *MockRepository_RemoveFromProjectQueue_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSocialMediaPublisher provides a mock function with given fields: ctx, postID, publisherID
func (_m *MockRepository) RemoveSocialMediaPublisher(ctx context.Context, postID string, publisherID string) error {
	ret := _m.Called(ctx, postID, publisherID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSocialMediaPublisher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, postID, publisherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_RemoveSocialMediaPublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSocialMediaPublisher'
type MockRepository_RemoveSocialMediaPublisher_Call struct {
	*mock.Call
}

// RemoveSocialMediaPublisher is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
//   - publisherID string
func (_e *MockRepository_Expecter) RemoveSocialMediaPublisher(ctx interface{}, postID interface{}, publisherID interface{}) *MockRepository_RemoveSocialMediaPublisher_Call {
	return &MockRepository_RemoveSocialMediaPublisher_Call{Call: _e.mock.On("RemoveSocialMediaPublisher", ctx, postID, publisherID)}
}

func (_c *MockRepository_RemoveSocialMediaPublisher_Call) Run(run func(ctx context.Context, postID string, publisherID string)) *MockRepository_RemoveSocialMediaPublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_RemoveSocialMediaPublisher_Call) Return(_a0 error) *MockRepository_RemoveSocialMediaPublisher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_RemoveSocialMediaPublisher_Call) RunAndReturn(run func(context.Context, string, string) error) *MockRepository_RemoveSocialMediaPublisher_Call {
	_c.Call.Return(run)
	return _c
}

// RestorePost provides a mock function with given fields: ctx, id
func (_m *MockRepository) RestorePost(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RestorePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_RestorePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestorePost'
type MockRepository_RestorePost_Call struct {
	*mock.Call
}

// RestorePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockRepository_Expecter) RestorePost(ctx interface{}, id interface{}) *MockRepository_RestorePost_Call {
	return &MockRepository_RestorePost_Call{Call: _e.mock.On("RestorePost", ctx, id)}
}

func (_c *MockRepository_RestorePost_Call) Run(run func(ctx context.Context, id string)) *MockRepository_RestorePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_RestorePost_Call) Return(_a0 error) *MockRepository_RestorePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_RestorePost_Call) RunAndReturn(run func(context.Context, string) error) *MockRepository_RestorePost_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *MockRepository) Save(ctx context.Context, _a1 *Post) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Post) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *Post
func (_e *MockRepository_Expecter) Save(ctx interface{}, _a1 interface{}) *MockRepository_Save_Call {
	return &MockRepository_Save_Call{Call: _e.mock.On("Save", ctx, _a1)}
}

func (_c *MockRepository_Save_Call) Run(run func(ctx context.Context, _a1 *Post)) *MockRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Post))
	})
	return _c
}

func (_c *MockRepository_Save_Call) Return(_a0 error) *MockRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Save_Call) RunAndReturn(run func(context.Context, *Post) error) *MockRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SchedulePost provides a mock function with given fields: ctx, id, sheduled_at
func (_m *MockRepository) SchedulePost(ctx context.Context, id string, sheduled_at time.Time) error {
	ret := _m.Called(ctx, id, sheduled_at)

	if len(ret) == 0 {
		panic("no return value specified for SchedulePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, id, sheduled_at)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_SchedulePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchedulePost'
type MockRepository_SchedulePost_Call struct {
	*mock.Call
}

// SchedulePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - sheduled_at time.Time
func (_e *MockRepository_Expecter) SchedulePost(ctx interface{}, id interface{}, sheduled_at interface{}) *MockRepository_SchedulePost_Call {
	return &MockRepository_SchedulePost_Call{Call: _e.mock.On("SchedulePost", ctx, id, sheduled_at)}
}

func (_c *MockRepository_SchedulePost_Call) Run(run func(ctx context.Context, id string, sheduled_at time.Time)) *MockRepository_SchedulePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockRepository_SchedulePost_Call) Return(_a0 error) *MockRepository_SchedulePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_SchedulePost_Call) RunAndReturn(run func(context.Context, string, time.Time) error) *MockRepository_SchedulePost_Call {
	_c.Call.Return(run)
	return _c
}

// UnschedulePost provides a mock function with given fields: ctx, id
func (_m *MockRepository) UnschedulePost(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UnschedulePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_UnschedulePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnschedulePost'
type MockRepository_UnschedulePost_Call struct {
	*mock.Call
}

// UnschedulePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockRepository_Expecter) UnschedulePost(ctx interface{}, id interface{}) *MockRepository_UnschedulePost_Call {
	return &MockRepository_UnschedulePost_Call{Call: _e.mock.On("UnschedulePost", ctx, id)}
}

func (_c *MockRepository_UnschedulePost_Call) Run(run func(ctx context.Context, id string)) *MockRepository_UnschedulePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_UnschedulePost_Call) Return(_a0 error) *MockRepository_UnschedulePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_UnschedulePost_Call) RunAndReturn(run func(context.Context, string) error) *MockRepository_UnschedulePost_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *MockRepository) Update(ctx context.Context, _a1 *Post) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Post) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *Post
func (_e *MockRepository_Expecter) Update(ctx interface{}, _a1 interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", ctx, _a1)}
}

func (_c *MockRepository_Update_Call) Run(run func(ctx context.Context, _a1 *Post)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Post))
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(_a0 error) *MockRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(context.Context, *Post) error) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectIdeaQueue provides a mock function with given fields: ctx, projectID, queue
func (_m *MockRepository) UpdateProjectIdeaQueue(ctx context.Context, projectID string, queue []string) error {
	ret := _m.Called(ctx, projectID, queue)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectIdeaQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, projectID, queue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_UpdateProjectIdeaQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectIdeaQueue'
type MockRepository_UpdateProjectIdeaQueue_Call struct {
	*mock.Call
}

// UpdateProjectIdeaQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - queue []string
func (_e *MockRepository_Expecter) UpdateProjectIdeaQueue(ctx interface{}, projectID interface{}, queue interface{}) *MockRepository_UpdateProjectIdeaQueue_Call {
	return &MockRepository_UpdateProjectIdeaQueue_Call{Call: _e.mock.On("UpdateProjectIdeaQueue", ctx, projectID, queue)}
}

func (_c *MockRepository_UpdateProjectIdeaQueue_Call) Run(run func(ctx context.Context, projectID string, queue []string)) *MockRepository_UpdateProjectIdeaQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_UpdateProjectIdeaQueue_Call) Return(_a0 error) *MockRepository_UpdateProjectIdeaQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_UpdateProjectIdeaQueue_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockRepository_UpdateProjectIdeaQueue_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectPostQueue provides a mock function with given fields: ctx, projectID, queue
func (_m *MockRepository) UpdateProjectPostQueue(ctx context.Context, projectID string, queue []string) error {
	ret := _m.Called(ctx, projectID, queue)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectPostQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, projectID, queue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_UpdateProjectPostQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectPostQueue'
type MockRepository_UpdateProjectPostQueue_Call struct {
	*mock.Call
}

// UpdateProjectPostQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - queue []string
func (_e *MockRepository_Expecter) UpdateProjectPostQueue(ctx interface{}, projectID interface{}, queue interface{}) *MockRepository_UpdateProjectPostQueue_Call {
	return &MockRepository_UpdateProjectPostQueue_Call{Call: _e.mock.On("UpdateProjectPostQueue", ctx, projectID, queue)}
}

func (_c *MockRepository_UpdateProjectPostQueue_Call) Run(run func(ctx context.Context, projectID string, queue []string)) *MockRepository_UpdateProjectPostQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_UpdateProjectPostQueue_Call) Return(_a0 error) *MockRepository_UpdateProjectPostQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_UpdateProjectPostQueue_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockRepository_UpdateProjectPostQueue_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePublishPostStatus provides a mock function with given fields: ctx, postID, platformID, status
func (_m *MockRepository) UpdatePublishPostStatus(ctx context.Context, postID string, platformID string, status string) error {
	ret := _m.Called(ctx, postID, platformID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePublishPostStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, postID, platformID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_UpdatePublishPostStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePublishPostStatus'
type MockRepository_UpdatePublishPostStatus_Call struct {
	*mock.Call
}

// UpdatePublishPostStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
//   - platformID string
//   - status string
func (_e *MockRepository_Expecter) UpdatePublishPostStatus(ctx interface{}, postID interface{}, platformID interface{}, status interface{}) *MockRepository_UpdatePublishPostStatus_Call {
	return &MockRepository_UpdatePublishPostStatus_Call{Call: _e.mock.On("UpdatePublishPostStatus", ctx, postID, platformID, status)}
}

func (_c *MockRepository_UpdatePublishPostStatus_Call) Run(run func(ctx context.Context, postID string, platformID string, status string)) *MockRepository_UpdatePublishPostStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRepository_UpdatePublishPostStatus_Call) Return(_a0 error) *MockRepository_UpdatePublishPostStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_UpdatePublishPostStatus_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockRepository_UpdatePublishPostStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
