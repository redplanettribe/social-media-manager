// Code generated by mockery v2.52.2. DO NOT EDIT.

package post

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// AddSocialMediaPublisher provides a mock function with given fields: ctx, projectID, postID, publisherID
func (_m *MockService) AddSocialMediaPublisher(ctx context.Context, projectID string, postID string, publisherID string) error {
	ret := _m.Called(ctx, projectID, postID, publisherID)

	if len(ret) == 0 {
		panic("no return value specified for AddSocialMediaPublisher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, projectID, postID, publisherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_AddSocialMediaPublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSocialMediaPublisher'
type MockService_AddSocialMediaPublisher_Call struct {
	*mock.Call
}

// AddSocialMediaPublisher is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - publisherID string
func (_e *MockService_Expecter) AddSocialMediaPublisher(ctx interface{}, projectID interface{}, postID interface{}, publisherID interface{}) *MockService_AddSocialMediaPublisher_Call {
	return &MockService_AddSocialMediaPublisher_Call{Call: _e.mock.On("AddSocialMediaPublisher", ctx, projectID, postID, publisherID)}
}

func (_c *MockService_AddSocialMediaPublisher_Call) Run(run func(ctx context.Context, projectID string, postID string, publisherID string)) *MockService_AddSocialMediaPublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_AddSocialMediaPublisher_Call) Return(_a0 error) *MockService_AddSocialMediaPublisher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_AddSocialMediaPublisher_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockService_AddSocialMediaPublisher_Call {
	_c.Call.Return(run)
	return _c
}

// AddToProjectQueue provides a mock function with given fields: ctx, projectID, postID
func (_m *MockService) AddToProjectQueue(ctx context.Context, projectID string, postID string) error {
	ret := _m.Called(ctx, projectID, postID)

	if len(ret) == 0 {
		panic("no return value specified for AddToProjectQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_AddToProjectQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToProjectQueue'
type MockService_AddToProjectQueue_Call struct {
	*mock.Call
}

// AddToProjectQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
func (_e *MockService_Expecter) AddToProjectQueue(ctx interface{}, projectID interface{}, postID interface{}) *MockService_AddToProjectQueue_Call {
	return &MockService_AddToProjectQueue_Call{Call: _e.mock.On("AddToProjectQueue", ctx, projectID, postID)}
}

func (_c *MockService_AddToProjectQueue_Call) Run(run func(ctx context.Context, projectID string, postID string)) *MockService_AddToProjectQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_AddToProjectQueue_Call) Return(_a0 error) *MockService_AddToProjectQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_AddToProjectQueue_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_AddToProjectQueue_Call {
	_c.Call.Return(run)
	return _c
}

// ArchivePost provides a mock function with given fields: ctx, projectID, postID
func (_m *MockService) ArchivePost(ctx context.Context, projectID string, postID string) error {
	ret := _m.Called(ctx, projectID, postID)

	if len(ret) == 0 {
		panic("no return value specified for ArchivePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_ArchivePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArchivePost'
type MockService_ArchivePost_Call struct {
	*mock.Call
}

// ArchivePost is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
func (_e *MockService_Expecter) ArchivePost(ctx interface{}, projectID interface{}, postID interface{}) *MockService_ArchivePost_Call {
	return &MockService_ArchivePost_Call{Call: _e.mock.On("ArchivePost", ctx, projectID, postID)}
}

func (_c *MockService_ArchivePost_Call) Run(run func(ctx context.Context, projectID string, postID string)) *MockService_ArchivePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_ArchivePost_Call) Return(_a0 error) *MockService_ArchivePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ArchivePost_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_ArchivePost_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePost provides a mock function with given fields: ctx, projectID, title, postType, textContent, isIdea, scheduledAt
func (_m *MockService) CreatePost(ctx context.Context, projectID string, title string, postType string, textContent string, isIdea bool, scheduledAt time.Time) (*Post, error) {
	ret := _m.Called(ctx, projectID, title, postType, textContent, isIdea, scheduledAt)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, bool, time.Time) (*Post, error)); ok {
		return rf(ctx, projectID, title, postType, textContent, isIdea, scheduledAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, bool, time.Time) *Post); ok {
		r0 = rf(ctx, projectID, title, postType, textContent, isIdea, scheduledAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, bool, time.Time) error); ok {
		r1 = rf(ctx, projectID, title, postType, textContent, isIdea, scheduledAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type MockService_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - title string
//   - postType string
//   - textContent string
//   - isIdea bool
//   - scheduledAt time.Time
func (_e *MockService_Expecter) CreatePost(ctx interface{}, projectID interface{}, title interface{}, postType interface{}, textContent interface{}, isIdea interface{}, scheduledAt interface{}) *MockService_CreatePost_Call {
	return &MockService_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, projectID, title, postType, textContent, isIdea, scheduledAt)}
}

func (_c *MockService_CreatePost_Call) Run(run func(ctx context.Context, projectID string, title string, postType string, textContent string, isIdea bool, scheduledAt time.Time)) *MockService_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(bool), args[6].(time.Time))
	})
	return _c
}

func (_c *MockService_CreatePost_Call) Return(_a0 *Post, _a1 error) *MockService_CreatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_CreatePost_Call) RunAndReturn(run func(context.Context, string, string, string, string, bool, time.Time) (*Post, error)) *MockService_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function with given fields: ctx, id
func (_m *MockService) DeletePost(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type MockService_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockService_Expecter) DeletePost(ctx interface{}, id interface{}) *MockService_DeletePost_Call {
	return &MockService_DeletePost_Call{Call: _e.mock.On("DeletePost", ctx, id)}
}

func (_c *MockService_DeletePost_Call) Run(run func(ctx context.Context, id string)) *MockService_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_DeletePost_Call) Return(_a0 error) *MockService_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_DeletePost_Call) RunAndReturn(run func(context.Context, string) error) *MockService_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// DequeuePostsToPublish provides a mock function with given fields: ctx, projectID
func (_m *MockService) DequeuePostsToPublish(ctx context.Context, projectID string) ([]*PublishPost, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for DequeuePostsToPublish")
	}

	var r0 []*PublishPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*PublishPost, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*PublishPost); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*PublishPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_DequeuePostsToPublish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DequeuePostsToPublish'
type MockService_DequeuePostsToPublish_Call struct {
	*mock.Call
}

// DequeuePostsToPublish is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockService_Expecter) DequeuePostsToPublish(ctx interface{}, projectID interface{}) *MockService_DequeuePostsToPublish_Call {
	return &MockService_DequeuePostsToPublish_Call{Call: _e.mock.On("DequeuePostsToPublish", ctx, projectID)}
}

func (_c *MockService_DequeuePostsToPublish_Call) Run(run func(ctx context.Context, projectID string)) *MockService_DequeuePostsToPublish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_DequeuePostsToPublish_Call) Return(_a0 []*PublishPost, _a1 error) *MockService_DequeuePostsToPublish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_DequeuePostsToPublish_Call) RunAndReturn(run func(context.Context, string) ([]*PublishPost, error)) *MockService_DequeuePostsToPublish_Call {
	_c.Call.Return(run)
	return _c
}

// FindScheduledReadyPosts provides a mock function with given fields: ctx, offset, chunkSize
func (_m *MockService) FindScheduledReadyPosts(ctx context.Context, offset int, chunkSize int) ([]*PublishPost, error) {
	ret := _m.Called(ctx, offset, chunkSize)

	if len(ret) == 0 {
		panic("no return value specified for FindScheduledReadyPosts")
	}

	var r0 []*PublishPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*PublishPost, error)); ok {
		return rf(ctx, offset, chunkSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*PublishPost); ok {
		r0 = rf(ctx, offset, chunkSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*PublishPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, chunkSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_FindScheduledReadyPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindScheduledReadyPosts'
type MockService_FindScheduledReadyPosts_Call struct {
	*mock.Call
}

// FindScheduledReadyPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
//   - chunkSize int
func (_e *MockService_Expecter) FindScheduledReadyPosts(ctx interface{}, offset interface{}, chunkSize interface{}) *MockService_FindScheduledReadyPosts_Call {
	return &MockService_FindScheduledReadyPosts_Call{Call: _e.mock.On("FindScheduledReadyPosts", ctx, offset, chunkSize)}
}

func (_c *MockService_FindScheduledReadyPosts_Call) Run(run func(ctx context.Context, offset int, chunkSize int)) *MockService_FindScheduledReadyPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockService_FindScheduledReadyPosts_Call) Return(_a0 []*PublishPost, _a1 error) *MockService_FindScheduledReadyPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_FindScheduledReadyPosts_Call) RunAndReturn(run func(context.Context, int, int) ([]*PublishPost, error)) *MockService_FindScheduledReadyPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailablePostTypes provides a mock function with no fields
func (_m *MockService) GetAvailablePostTypes() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAvailablePostTypes")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockService_GetAvailablePostTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailablePostTypes'
type MockService_GetAvailablePostTypes_Call struct {
	*mock.Call
}

// GetAvailablePostTypes is a helper method to define mock.On call
func (_e *MockService_Expecter) GetAvailablePostTypes() *MockService_GetAvailablePostTypes_Call {
	return &MockService_GetAvailablePostTypes_Call{Call: _e.mock.On("GetAvailablePostTypes")}
}

func (_c *MockService_GetAvailablePostTypes_Call) Run(run func()) *MockService_GetAvailablePostTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_GetAvailablePostTypes_Call) Return(_a0 []string) *MockService_GetAvailablePostTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_GetAvailablePostTypes_Call) RunAndReturn(run func() []string) *MockService_GetAvailablePostTypes_Call {
	_c.Call.Return(run)
	return _c
}

// GetPost provides a mock function with given fields: ctx, id
func (_m *MockService) GetPost(ctx context.Context, id string) (*PostResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 *PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*PostResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *PostResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPost'
type MockService_GetPost_Call struct {
	*mock.Call
}

// GetPost is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockService_Expecter) GetPost(ctx interface{}, id interface{}) *MockService_GetPost_Call {
	return &MockService_GetPost_Call{Call: _e.mock.On("GetPost", ctx, id)}
}

func (_c *MockService_GetPost_Call) Run(run func(ctx context.Context, id string)) *MockService_GetPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetPost_Call) Return(_a0 *PostResponse, _a1 error) *MockService_GetPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetPost_Call) RunAndReturn(run func(context.Context, string) (*PostResponse, error)) *MockService_GetPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostToPublish provides a mock function with given fields: ctx, id
func (_m *MockService) GetPostToPublish(ctx context.Context, id string) (*PublishPost, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostToPublish")
	}

	var r0 *PublishPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*PublishPost, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *PublishPost); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PublishPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetPostToPublish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostToPublish'
type MockService_GetPostToPublish_Call struct {
	*mock.Call
}

// GetPostToPublish is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockService_Expecter) GetPostToPublish(ctx interface{}, id interface{}) *MockService_GetPostToPublish_Call {
	return &MockService_GetPostToPublish_Call{Call: _e.mock.On("GetPostToPublish", ctx, id)}
}

func (_c *MockService_GetPostToPublish_Call) Run(run func(ctx context.Context, id string)) *MockService_GetPostToPublish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetPostToPublish_Call) Return(_a0 *PublishPost, _a1 error) *MockService_GetPostToPublish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetPostToPublish_Call) RunAndReturn(run func(context.Context, string) (*PublishPost, error)) *MockService_GetPostToPublish_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectQueuedPosts provides a mock function with given fields: ctx, projectID
func (_m *MockService) GetProjectQueuedPosts(ctx context.Context, projectID string) ([]*Post, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectQueuedPosts")
	}

	var r0 []*Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*Post, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*Post); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetProjectQueuedPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectQueuedPosts'
type MockService_GetProjectQueuedPosts_Call struct {
	*mock.Call
}

// GetProjectQueuedPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockService_Expecter) GetProjectQueuedPosts(ctx interface{}, projectID interface{}) *MockService_GetProjectQueuedPosts_Call {
	return &MockService_GetProjectQueuedPosts_Call{Call: _e.mock.On("GetProjectQueuedPosts", ctx, projectID)}
}

func (_c *MockService_GetProjectQueuedPosts_Call) Run(run func(ctx context.Context, projectID string)) *MockService_GetProjectQueuedPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetProjectQueuedPosts_Call) Return(_a0 []*Post, _a1 error) *MockService_GetProjectQueuedPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetProjectQueuedPosts_Call) RunAndReturn(run func(context.Context, string) ([]*Post, error)) *MockService_GetProjectQueuedPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetSocialMediaPublishers provides a mock function with given fields: ctx, postID
func (_m *MockService) GetSocialMediaPublishers(ctx context.Context, postID string) ([]string, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetSocialMediaPublishers")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetSocialMediaPublishers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSocialMediaPublishers'
type MockService_GetSocialMediaPublishers_Call struct {
	*mock.Call
}

// GetSocialMediaPublishers is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
func (_e *MockService_Expecter) GetSocialMediaPublishers(ctx interface{}, postID interface{}) *MockService_GetSocialMediaPublishers_Call {
	return &MockService_GetSocialMediaPublishers_Call{Call: _e.mock.On("GetSocialMediaPublishers", ctx, postID)}
}

func (_c *MockService_GetSocialMediaPublishers_Call) Run(run func(ctx context.Context, postID string)) *MockService_GetSocialMediaPublishers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetSocialMediaPublishers_Call) Return(_a0 []string, _a1 error) *MockService_GetSocialMediaPublishers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetSocialMediaPublishers_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *MockService_GetSocialMediaPublishers_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectPosts provides a mock function with given fields: ctx, projectID
func (_m *MockService) ListProjectPosts(ctx context.Context, projectID string) ([]*Post, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectPosts")
	}

	var r0 []*Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*Post, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*Post); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ListProjectPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectPosts'
type MockService_ListProjectPosts_Call struct {
	*mock.Call
}

// ListProjectPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockService_Expecter) ListProjectPosts(ctx interface{}, projectID interface{}) *MockService_ListProjectPosts_Call {
	return &MockService_ListProjectPosts_Call{Call: _e.mock.On("ListProjectPosts", ctx, projectID)}
}

func (_c *MockService_ListProjectPosts_Call) Run(run func(ctx context.Context, projectID string)) *MockService_ListProjectPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_ListProjectPosts_Call) Return(_a0 []*Post, _a1 error) *MockService_ListProjectPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_ListProjectPosts_Call) RunAndReturn(run func(context.Context, string) ([]*Post, error)) *MockService_ListProjectPosts_Call {
	_c.Call.Return(run)
	return _c
}

// MoveIdeaInQueue provides a mock function with given fields: ctx, projectID, currentIndex, newIndex
func (_m *MockService) MoveIdeaInQueue(ctx context.Context, projectID string, currentIndex int, newIndex int) error {
	ret := _m.Called(ctx, projectID, currentIndex, newIndex)

	if len(ret) == 0 {
		panic("no return value specified for MoveIdeaInQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) error); ok {
		r0 = rf(ctx, projectID, currentIndex, newIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_MoveIdeaInQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveIdeaInQueue'
type MockService_MoveIdeaInQueue_Call struct {
	*mock.Call
}

// MoveIdeaInQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - currentIndex int
//   - newIndex int
func (_e *MockService_Expecter) MoveIdeaInQueue(ctx interface{}, projectID interface{}, currentIndex interface{}, newIndex interface{}) *MockService_MoveIdeaInQueue_Call {
	return &MockService_MoveIdeaInQueue_Call{Call: _e.mock.On("MoveIdeaInQueue", ctx, projectID, currentIndex, newIndex)}
}

func (_c *MockService_MoveIdeaInQueue_Call) Run(run func(ctx context.Context, projectID string, currentIndex int, newIndex int)) *MockService_MoveIdeaInQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockService_MoveIdeaInQueue_Call) Return(_a0 error) *MockService_MoveIdeaInQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_MoveIdeaInQueue_Call) RunAndReturn(run func(context.Context, string, int, int) error) *MockService_MoveIdeaInQueue_Call {
	_c.Call.Return(run)
	return _c
}

// MovePostInQueue provides a mock function with given fields: ctx, projectID, currentIndex, newIndex
func (_m *MockService) MovePostInQueue(ctx context.Context, projectID string, currentIndex int, newIndex int) error {
	ret := _m.Called(ctx, projectID, currentIndex, newIndex)

	if len(ret) == 0 {
		panic("no return value specified for MovePostInQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) error); ok {
		r0 = rf(ctx, projectID, currentIndex, newIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_MovePostInQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MovePostInQueue'
type MockService_MovePostInQueue_Call struct {
	*mock.Call
}

// MovePostInQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - currentIndex int
//   - newIndex int
func (_e *MockService_Expecter) MovePostInQueue(ctx interface{}, projectID interface{}, currentIndex interface{}, newIndex interface{}) *MockService_MovePostInQueue_Call {
	return &MockService_MovePostInQueue_Call{Call: _e.mock.On("MovePostInQueue", ctx, projectID, currentIndex, newIndex)}
}

func (_c *MockService_MovePostInQueue_Call) Run(run func(ctx context.Context, projectID string, currentIndex int, newIndex int)) *MockService_MovePostInQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockService_MovePostInQueue_Call) Return(_a0 error) *MockService_MovePostInQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_MovePostInQueue_Call) RunAndReturn(run func(context.Context, string, int, int) error) *MockService_MovePostInQueue_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIdeaFromProjectQueue provides a mock function with given fields: ctx, projectID, postID
func (_m *MockService) RemoveIdeaFromProjectQueue(ctx context.Context, projectID string, postID string) error {
	ret := _m.Called(ctx, projectID, postID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIdeaFromProjectQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RemoveIdeaFromProjectQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIdeaFromProjectQueue'
type MockService_RemoveIdeaFromProjectQueue_Call struct {
	*mock.Call
}

// RemoveIdeaFromProjectQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
func (_e *MockService_Expecter) RemoveIdeaFromProjectQueue(ctx interface{}, projectID interface{}, postID interface{}) *MockService_RemoveIdeaFromProjectQueue_Call {
	return &MockService_RemoveIdeaFromProjectQueue_Call{Call: _e.mock.On("RemoveIdeaFromProjectQueue", ctx, projectID, postID)}
}

func (_c *MockService_RemoveIdeaFromProjectQueue_Call) Run(run func(ctx context.Context, projectID string, postID string)) *MockService_RemoveIdeaFromProjectQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_RemoveIdeaFromProjectQueue_Call) Return(_a0 error) *MockService_RemoveIdeaFromProjectQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RemoveIdeaFromProjectQueue_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_RemoveIdeaFromProjectQueue_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePostFromProjectQueue provides a mock function with given fields: ctx, projectID, postID
func (_m *MockService) RemovePostFromProjectQueue(ctx context.Context, projectID string, postID string) error {
	ret := _m.Called(ctx, projectID, postID)

	if len(ret) == 0 {
		panic("no return value specified for RemovePostFromProjectQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RemovePostFromProjectQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePostFromProjectQueue'
type MockService_RemovePostFromProjectQueue_Call struct {
	*mock.Call
}

// RemovePostFromProjectQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
func (_e *MockService_Expecter) RemovePostFromProjectQueue(ctx interface{}, projectID interface{}, postID interface{}) *MockService_RemovePostFromProjectQueue_Call {
	return &MockService_RemovePostFromProjectQueue_Call{Call: _e.mock.On("RemovePostFromProjectQueue", ctx, projectID, postID)}
}

func (_c *MockService_RemovePostFromProjectQueue_Call) Run(run func(ctx context.Context, projectID string, postID string)) *MockService_RemovePostFromProjectQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_RemovePostFromProjectQueue_Call) Return(_a0 error) *MockService_RemovePostFromProjectQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RemovePostFromProjectQueue_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_RemovePostFromProjectQueue_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSocialMediaPublisher provides a mock function with given fields: ctx, projectID, postID, publisherID
func (_m *MockService) RemoveSocialMediaPublisher(ctx context.Context, projectID string, postID string, publisherID string) error {
	ret := _m.Called(ctx, projectID, postID, publisherID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSocialMediaPublisher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, projectID, postID, publisherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RemoveSocialMediaPublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSocialMediaPublisher'
type MockService_RemoveSocialMediaPublisher_Call struct {
	*mock.Call
}

// RemoveSocialMediaPublisher is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - publisherID string
func (_e *MockService_Expecter) RemoveSocialMediaPublisher(ctx interface{}, projectID interface{}, postID interface{}, publisherID interface{}) *MockService_RemoveSocialMediaPublisher_Call {
	return &MockService_RemoveSocialMediaPublisher_Call{Call: _e.mock.On("RemoveSocialMediaPublisher", ctx, projectID, postID, publisherID)}
}

func (_c *MockService_RemoveSocialMediaPublisher_Call) Run(run func(ctx context.Context, projectID string, postID string, publisherID string)) *MockService_RemoveSocialMediaPublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_RemoveSocialMediaPublisher_Call) Return(_a0 error) *MockService_RemoveSocialMediaPublisher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RemoveSocialMediaPublisher_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockService_RemoveSocialMediaPublisher_Call {
	_c.Call.Return(run)
	return _c
}

// RestorePost provides a mock function with given fields: ctx, projectID, postID
func (_m *MockService) RestorePost(ctx context.Context, projectID string, postID string) error {
	ret := _m.Called(ctx, projectID, postID)

	if len(ret) == 0 {
		panic("no return value specified for RestorePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RestorePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestorePost'
type MockService_RestorePost_Call struct {
	*mock.Call
}

// RestorePost is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
func (_e *MockService_Expecter) RestorePost(ctx interface{}, projectID interface{}, postID interface{}) *MockService_RestorePost_Call {
	return &MockService_RestorePost_Call{Call: _e.mock.On("RestorePost", ctx, projectID, postID)}
}

func (_c *MockService_RestorePost_Call) Run(run func(ctx context.Context, projectID string, postID string)) *MockService_RestorePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_RestorePost_Call) Return(_a0 error) *MockService_RestorePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RestorePost_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_RestorePost_Call {
	_c.Call.Return(run)
	return _c
}

// SchedulePost provides a mock function with given fields: ctx, id, scheduledAt
func (_m *MockService) SchedulePost(ctx context.Context, id string, scheduledAt time.Time) error {
	ret := _m.Called(ctx, id, scheduledAt)

	if len(ret) == 0 {
		panic("no return value specified for SchedulePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, id, scheduledAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SchedulePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchedulePost'
type MockService_SchedulePost_Call struct {
	*mock.Call
}

// SchedulePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - scheduledAt time.Time
func (_e *MockService_Expecter) SchedulePost(ctx interface{}, id interface{}, scheduledAt interface{}) *MockService_SchedulePost_Call {
	return &MockService_SchedulePost_Call{Call: _e.mock.On("SchedulePost", ctx, id, scheduledAt)}
}

func (_c *MockService_SchedulePost_Call) Run(run func(ctx context.Context, id string, scheduledAt time.Time)) *MockService_SchedulePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockService_SchedulePost_Call) Return(_a0 error) *MockService_SchedulePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SchedulePost_Call) RunAndReturn(run func(context.Context, string, time.Time) error) *MockService_SchedulePost_Call {
	_c.Call.Return(run)
	return _c
}

// UnschedulePost provides a mock function with given fields: ctx, id
func (_m *MockService) UnschedulePost(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UnschedulePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_UnschedulePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnschedulePost'
type MockService_UnschedulePost_Call struct {
	*mock.Call
}

// UnschedulePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockService_Expecter) UnschedulePost(ctx interface{}, id interface{}) *MockService_UnschedulePost_Call {
	return &MockService_UnschedulePost_Call{Call: _e.mock.On("UnschedulePost", ctx, id)}
}

func (_c *MockService_UnschedulePost_Call) Run(run func(ctx context.Context, id string)) *MockService_UnschedulePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_UnschedulePost_Call) Return(_a0 error) *MockService_UnschedulePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_UnschedulePost_Call) RunAndReturn(run func(context.Context, string) error) *MockService_UnschedulePost_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function with given fields: ctx, id, projectID, title, postType, textContent, isIdea
func (_m *MockService) UpdatePost(ctx context.Context, id string, projectID string, title string, postType string, textContent string, isIdea bool) (*Post, error) {
	ret := _m.Called(ctx, id, projectID, title, postType, textContent, isIdea)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 *Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, bool) (*Post, error)); ok {
		return rf(ctx, id, projectID, title, postType, textContent, isIdea)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, bool) *Post); ok {
		r0 = rf(ctx, id, projectID, title, postType, textContent, isIdea)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, bool) error); ok {
		r1 = rf(ctx, id, projectID, title, postType, textContent, isIdea)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type MockService_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - projectID string
//   - title string
//   - postType string
//   - textContent string
//   - isIdea bool
func (_e *MockService_Expecter) UpdatePost(ctx interface{}, id interface{}, projectID interface{}, title interface{}, postType interface{}, textContent interface{}, isIdea interface{}) *MockService_UpdatePost_Call {
	return &MockService_UpdatePost_Call{Call: _e.mock.On("UpdatePost", ctx, id, projectID, title, postType, textContent, isIdea)}
}

func (_c *MockService_UpdatePost_Call) Run(run func(ctx context.Context, id string, projectID string, title string, postType string, textContent string, isIdea bool)) *MockService_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(bool))
	})
	return _c
}

func (_c *MockService_UpdatePost_Call) Return(_a0 *Post, _a1 error) *MockService_UpdatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_UpdatePost_Call) RunAndReturn(run func(context.Context, string, string, string, string, string, bool) (*Post, error)) *MockService_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePostStatus provides a mock function with given fields: ctx, id, status
func (_m *MockService) UpdatePostStatus(ctx context.Context, id string, status PostStatus) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePostStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, PostStatus) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_UpdatePostStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePostStatus'
type MockService_UpdatePostStatus_Call struct {
	*mock.Call
}

// UpdatePostStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - status PostStatus
func (_e *MockService_Expecter) UpdatePostStatus(ctx interface{}, id interface{}, status interface{}) *MockService_UpdatePostStatus_Call {
	return &MockService_UpdatePostStatus_Call{Call: _e.mock.On("UpdatePostStatus", ctx, id, status)}
}

func (_c *MockService_UpdatePostStatus_Call) Run(run func(ctx context.Context, id string, status PostStatus)) *MockService_UpdatePostStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(PostStatus))
	})
	return _c
}

func (_c *MockService_UpdatePostStatus_Call) Return(_a0 error) *MockService_UpdatePostStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_UpdatePostStatus_Call) RunAndReturn(run func(context.Context, string, PostStatus) error) *MockService_UpdatePostStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePublishPostStatus provides a mock function with given fields: ctx, postID, platformID, status
func (_m *MockService) UpdatePublishPostStatus(ctx context.Context, postID string, platformID string, status PublishPostStatus) error {
	ret := _m.Called(ctx, postID, platformID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePublishPostStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, PublishPostStatus) error); ok {
		r0 = rf(ctx, postID, platformID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_UpdatePublishPostStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePublishPostStatus'
type MockService_UpdatePublishPostStatus_Call struct {
	*mock.Call
}

// UpdatePublishPostStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
//   - platformID string
//   - status PublishPostStatus
func (_e *MockService_Expecter) UpdatePublishPostStatus(ctx interface{}, postID interface{}, platformID interface{}, status interface{}) *MockService_UpdatePublishPostStatus_Call {
	return &MockService_UpdatePublishPostStatus_Call{Call: _e.mock.On("UpdatePublishPostStatus", ctx, postID, platformID, status)}
}

func (_c *MockService_UpdatePublishPostStatus_Call) Run(run func(ctx context.Context, postID string, platformID string, status PublishPostStatus)) *MockService_UpdatePublishPostStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(PublishPostStatus))
	})
	return _c
}

func (_c *MockService_UpdatePublishPostStatus_Call) Return(_a0 error) *MockService_UpdatePublishPostStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_UpdatePublishPostStatus_Call) RunAndReturn(run func(context.Context, string, string, PublishPostStatus) error) *MockService_UpdatePublishPostStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
