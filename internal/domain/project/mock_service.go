// Code generated by mockery v2.52.2. DO NOT EDIT.

package project

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// AddTimeSlot provides a mock function with given fields: ctx, projectID, dayOfWeek, hour, minute
func (_m *MockService) AddTimeSlot(ctx context.Context, projectID string, dayOfWeek time.Weekday, hour int, minute int) error {
	ret := _m.Called(ctx, projectID, dayOfWeek, hour, minute)

	if len(ret) == 0 {
		panic("no return value specified for AddTimeSlot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Weekday, int, int) error); ok {
		r0 = rf(ctx, projectID, dayOfWeek, hour, minute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserRole provides a mock function with given fields: ctx, projectID, userID, role
func (_m *MockService) AddUserRole(ctx context.Context, projectID string, userID string, role int) error {
	ret := _m.Called(ctx, projectID, userID, role)

	if len(ret) == 0 {
		panic("no return value specified for AddUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, projectID, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserToProject provides a mock function with given fields: ctx, projectID, email
func (_m *MockService) AddUserToProject(ctx context.Context, projectID string, email string) error {
	ret := _m.Called(ctx, projectID, email)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProject provides a mock function with given fields: ctx, name, description
func (_m *MockService) CreateProject(ctx context.Context, name string, description string) (*Project, error) {
	ret := _m.Called(ctx, name, description)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*Project, error)); ok {
		return rf(ctx, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *Project); ok {
		r0 = rf(ctx, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: ctx, projectID
func (_m *MockService) DeleteProject(ctx context.Context, projectID string) error {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableSocialPlatform provides a mock function with given fields: ctx, projectID, socialPlatformID
func (_m *MockService) DisableSocialPlatform(ctx context.Context, projectID string, socialPlatformID string) error {
	ret := _m.Called(ctx, projectID, socialPlatformID)

	if len(ret) == 0 {
		panic("no return value specified for DisableSocialPlatform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, socialPlatformID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableSocialPlatform provides a mock function with given fields: ctx, projectID, socialPlatformID
func (_m *MockService) EnableSocialPlatform(ctx context.Context, projectID string, socialPlatformID string) error {
	ret := _m.Called(ctx, projectID, socialPlatformID)

	if len(ret) == 0 {
		panic("no return value specified for EnableSocialPlatform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, socialPlatformID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindActiveProjectsChunk provides a mock function with given fields: ctx, offset, chunkSize
func (_m *MockService) FindActiveProjectsChunk(ctx context.Context, offset int, chunkSize int) ([]*Project, error) {
	ret := _m.Called(ctx, offset, chunkSize)

	if len(ret) == 0 {
		panic("no return value specified for FindActiveProjectsChunk")
	}

	var r0 []*Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*Project, error)); ok {
		return rf(ctx, offset, chunkSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*Project); ok {
		r0 = rf(ctx, offset, chunkSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, chunkSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultUserPlatformInfo provides a mock function with given fields: ctx, projecID, platformID
func (_m *MockService) GetDefaultUserPlatformInfo(ctx context.Context, projecID string, platformID string) (*UserPlatformInfo, error) {
	ret := _m.Called(ctx, projecID, platformID)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultUserPlatformInfo")
	}

	var r0 *UserPlatformInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*UserPlatformInfo, error)); ok {
		return rf(ctx, projecID, platformID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *UserPlatformInfo); ok {
		r0 = rf(ctx, projecID, platformID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserPlatformInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projecID, platformID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnabledSocialPlatforms provides a mock function with given fields: ctx, projectID
func (_m *MockService) GetEnabledSocialPlatforms(ctx context.Context, projectID string) ([]SocialPlatform, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetEnabledSocialPlatforms")
	}

	var r0 []SocialPlatform
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]SocialPlatform, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []SocialPlatform); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]SocialPlatform)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: ctx, projectID
func (_m *MockService) GetProject(ctx context.Context, projectID string) (*ProjectResponse, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *ProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ProjectResponse, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ProjectResponse); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectSchedule provides a mock function with given fields: ctx, projectID
func (_m *MockService) GetProjectSchedule(ctx context.Context, projectID string) (*WeeklyPostSchedule, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectSchedule")
	}

	var r0 *WeeklyPostSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*WeeklyPostSchedule, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *WeeklyPostSchedule); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WeeklyPostSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRoles provides a mock function with given fields: ctx, userID, projectID
func (_m *MockService) GetUserRoles(ctx context.Context, userID string, projectID string) ([]string, error) {
	ret := _m.Called(ctx, userID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]string, error)); ok {
		return rf(ctx, userID, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = rf(ctx, userID, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsProjectTimeToPublish provides a mock function with given fields: ctx, projectID
func (_m *MockService) IsProjectTimeToPublish(ctx context.Context, projectID string) (bool, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for IsProjectTimeToPublish")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx
func (_m *MockService) ListProjects(ctx context.Context) ([]*Project, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 []*Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Project, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Project); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTimeSlot provides a mock function with given fields: ctx, projectID, dayOfWeek, hour, minute
func (_m *MockService) RemoveTimeSlot(ctx context.Context, projectID string, dayOfWeek time.Weekday, hour int, minute int) error {
	ret := _m.Called(ctx, projectID, dayOfWeek, hour, minute)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTimeSlot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Weekday, int, int) error); ok {
		r0 = rf(ctx, projectID, dayOfWeek, hour, minute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUserFromProject provides a mock function with given fields: ctx, projectID, userID
func (_m *MockService) RemoveUserFromProject(ctx context.Context, projectID string, userID string) error {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUserRole provides a mock function with given fields: ctx, projectID, userID, role
func (_m *MockService) RemoveUserRole(ctx context.Context, projectID string, userID string, role int) error {
	ret := _m.Called(ctx, projectID, userID, role)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, projectID, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDefaultUser provides a mock function with given fields: ctx, projectID, userID
func (_m *MockService) SetDefaultUser(ctx context.Context, projectID string, userID string) error {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProject provides a mock function with given fields: ctx, projectID, name, description
func (_m *MockService) UpdateProject(ctx context.Context, projectID string, name string, description string) (*Project, error) {
	ret := _m.Called(ctx, projectID, name, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*Project, error)); ok {
		return rf(ctx, projectID, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *Project); ok {
		r0 = rf(ctx, projectID, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
