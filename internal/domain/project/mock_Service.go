// Code generated by mockery v2.52.2. DO NOT EDIT.

package project

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// AddTimeSlot provides a mock function with given fields: ctx, projectID, dayOfWeek, hour, minute
func (_m *MockService) AddTimeSlot(ctx context.Context, projectID string, dayOfWeek time.Weekday, hour int, minute int) error {
	ret := _m.Called(ctx, projectID, dayOfWeek, hour, minute)

	if len(ret) == 0 {
		panic("no return value specified for AddTimeSlot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Weekday, int, int) error); ok {
		r0 = rf(ctx, projectID, dayOfWeek, hour, minute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_AddTimeSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTimeSlot'
type MockService_AddTimeSlot_Call struct {
	*mock.Call
}

// AddTimeSlot is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - dayOfWeek time.Weekday
//   - hour int
//   - minute int
func (_e *MockService_Expecter) AddTimeSlot(ctx interface{}, projectID interface{}, dayOfWeek interface{}, hour interface{}, minute interface{}) *MockService_AddTimeSlot_Call {
	return &MockService_AddTimeSlot_Call{Call: _e.mock.On("AddTimeSlot", ctx, projectID, dayOfWeek, hour, minute)}
}

func (_c *MockService_AddTimeSlot_Call) Run(run func(ctx context.Context, projectID string, dayOfWeek time.Weekday, hour int, minute int)) *MockService_AddTimeSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Weekday), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *MockService_AddTimeSlot_Call) Return(_a0 error) *MockService_AddTimeSlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_AddTimeSlot_Call) RunAndReturn(run func(context.Context, string, time.Weekday, int, int) error) *MockService_AddTimeSlot_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserRole provides a mock function with given fields: ctx, projectID, userID, role
func (_m *MockService) AddUserRole(ctx context.Context, projectID string, userID string, role int) error {
	ret := _m.Called(ctx, projectID, userID, role)

	if len(ret) == 0 {
		panic("no return value specified for AddUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, projectID, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_AddUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserRole'
type MockService_AddUserRole_Call struct {
	*mock.Call
}

// AddUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - userID string
//   - role int
func (_e *MockService_Expecter) AddUserRole(ctx interface{}, projectID interface{}, userID interface{}, role interface{}) *MockService_AddUserRole_Call {
	return &MockService_AddUserRole_Call{Call: _e.mock.On("AddUserRole", ctx, projectID, userID, role)}
}

func (_c *MockService_AddUserRole_Call) Run(run func(ctx context.Context, projectID string, userID string, role int)) *MockService_AddUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockService_AddUserRole_Call) Return(_a0 error) *MockService_AddUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_AddUserRole_Call) RunAndReturn(run func(context.Context, string, string, int) error) *MockService_AddUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToProject provides a mock function with given fields: ctx, projectID, email
func (_m *MockService) AddUserToProject(ctx context.Context, projectID string, email string) error {
	ret := _m.Called(ctx, projectID, email)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_AddUserToProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToProject'
type MockService_AddUserToProject_Call struct {
	*mock.Call
}

// AddUserToProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - email string
func (_e *MockService_Expecter) AddUserToProject(ctx interface{}, projectID interface{}, email interface{}) *MockService_AddUserToProject_Call {
	return &MockService_AddUserToProject_Call{Call: _e.mock.On("AddUserToProject", ctx, projectID, email)}
}

func (_c *MockService_AddUserToProject_Call) Run(run func(ctx context.Context, projectID string, email string)) *MockService_AddUserToProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_AddUserToProject_Call) Return(_a0 error) *MockService_AddUserToProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_AddUserToProject_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_AddUserToProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function with given fields: ctx, name, description
func (_m *MockService) CreateProject(ctx context.Context, name string, description string) (*Project, error) {
	ret := _m.Called(ctx, name, description)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*Project, error)); ok {
		return rf(ctx, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *Project); ok {
		r0 = rf(ctx, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type MockService_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description string
func (_e *MockService_Expecter) CreateProject(ctx interface{}, name interface{}, description interface{}) *MockService_CreateProject_Call {
	return &MockService_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx, name, description)}
}

func (_c *MockService_CreateProject_Call) Run(run func(ctx context.Context, name string, description string)) *MockService_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_CreateProject_Call) Return(_a0 *Project, _a1 error) *MockService_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_CreateProject_Call) RunAndReturn(run func(context.Context, string, string) (*Project, error)) *MockService_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProject provides a mock function with given fields: ctx, projectID
func (_m *MockService) DeleteProject(ctx context.Context, projectID string) error {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type MockService_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockService_Expecter) DeleteProject(ctx interface{}, projectID interface{}) *MockService_DeleteProject_Call {
	return &MockService_DeleteProject_Call{Call: _e.mock.On("DeleteProject", ctx, projectID)}
}

func (_c *MockService_DeleteProject_Call) Run(run func(ctx context.Context, projectID string)) *MockService_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_DeleteProject_Call) Return(_a0 error) *MockService_DeleteProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_DeleteProject_Call) RunAndReturn(run func(context.Context, string) error) *MockService_DeleteProject_Call {
	_c.Call.Return(run)
	return _c
}

// DisableSocialPlatform provides a mock function with given fields: ctx, projectID, socialPlatformID
func (_m *MockService) DisableSocialPlatform(ctx context.Context, projectID string, socialPlatformID string) error {
	ret := _m.Called(ctx, projectID, socialPlatformID)

	if len(ret) == 0 {
		panic("no return value specified for DisableSocialPlatform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, socialPlatformID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_DisableSocialPlatform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableSocialPlatform'
type MockService_DisableSocialPlatform_Call struct {
	*mock.Call
}

// DisableSocialPlatform is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - socialPlatformID string
func (_e *MockService_Expecter) DisableSocialPlatform(ctx interface{}, projectID interface{}, socialPlatformID interface{}) *MockService_DisableSocialPlatform_Call {
	return &MockService_DisableSocialPlatform_Call{Call: _e.mock.On("DisableSocialPlatform", ctx, projectID, socialPlatformID)}
}

func (_c *MockService_DisableSocialPlatform_Call) Run(run func(ctx context.Context, projectID string, socialPlatformID string)) *MockService_DisableSocialPlatform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_DisableSocialPlatform_Call) Return(_a0 error) *MockService_DisableSocialPlatform_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_DisableSocialPlatform_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_DisableSocialPlatform_Call {
	_c.Call.Return(run)
	return _c
}

// EnableSocialPlatform provides a mock function with given fields: ctx, projectID, socialPlatformID
func (_m *MockService) EnableSocialPlatform(ctx context.Context, projectID string, socialPlatformID string) error {
	ret := _m.Called(ctx, projectID, socialPlatformID)

	if len(ret) == 0 {
		panic("no return value specified for EnableSocialPlatform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, socialPlatformID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_EnableSocialPlatform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableSocialPlatform'
type MockService_EnableSocialPlatform_Call struct {
	*mock.Call
}

// EnableSocialPlatform is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - socialPlatformID string
func (_e *MockService_Expecter) EnableSocialPlatform(ctx interface{}, projectID interface{}, socialPlatformID interface{}) *MockService_EnableSocialPlatform_Call {
	return &MockService_EnableSocialPlatform_Call{Call: _e.mock.On("EnableSocialPlatform", ctx, projectID, socialPlatformID)}
}

func (_c *MockService_EnableSocialPlatform_Call) Run(run func(ctx context.Context, projectID string, socialPlatformID string)) *MockService_EnableSocialPlatform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_EnableSocialPlatform_Call) Return(_a0 error) *MockService_EnableSocialPlatform_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_EnableSocialPlatform_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_EnableSocialPlatform_Call {
	_c.Call.Return(run)
	return _c
}

// FindActiveProjectsChunk provides a mock function with given fields: ctx, offset, chunkSize
func (_m *MockService) FindActiveProjectsChunk(ctx context.Context, offset int, chunkSize int) ([]*Project, error) {
	ret := _m.Called(ctx, offset, chunkSize)

	if len(ret) == 0 {
		panic("no return value specified for FindActiveProjectsChunk")
	}

	var r0 []*Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*Project, error)); ok {
		return rf(ctx, offset, chunkSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*Project); ok {
		r0 = rf(ctx, offset, chunkSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, chunkSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_FindActiveProjectsChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindActiveProjectsChunk'
type MockService_FindActiveProjectsChunk_Call struct {
	*mock.Call
}

// FindActiveProjectsChunk is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
//   - chunkSize int
func (_e *MockService_Expecter) FindActiveProjectsChunk(ctx interface{}, offset interface{}, chunkSize interface{}) *MockService_FindActiveProjectsChunk_Call {
	return &MockService_FindActiveProjectsChunk_Call{Call: _e.mock.On("FindActiveProjectsChunk", ctx, offset, chunkSize)}
}

func (_c *MockService_FindActiveProjectsChunk_Call) Run(run func(ctx context.Context, offset int, chunkSize int)) *MockService_FindActiveProjectsChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockService_FindActiveProjectsChunk_Call) Return(_a0 []*Project, _a1 error) *MockService_FindActiveProjectsChunk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_FindActiveProjectsChunk_Call) RunAndReturn(run func(context.Context, int, int) ([]*Project, error)) *MockService_FindActiveProjectsChunk_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultUserPlatformInfo provides a mock function with given fields: ctx, projecID, platformID
func (_m *MockService) GetDefaultUserPlatformInfo(ctx context.Context, projecID string, platformID string) (*UserPlatformInfo, error) {
	ret := _m.Called(ctx, projecID, platformID)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultUserPlatformInfo")
	}

	var r0 *UserPlatformInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*UserPlatformInfo, error)); ok {
		return rf(ctx, projecID, platformID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *UserPlatformInfo); ok {
		r0 = rf(ctx, projecID, platformID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserPlatformInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projecID, platformID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetDefaultUserPlatformInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultUserPlatformInfo'
type MockService_GetDefaultUserPlatformInfo_Call struct {
	*mock.Call
}

// GetDefaultUserPlatformInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - projecID string
//   - platformID string
func (_e *MockService_Expecter) GetDefaultUserPlatformInfo(ctx interface{}, projecID interface{}, platformID interface{}) *MockService_GetDefaultUserPlatformInfo_Call {
	return &MockService_GetDefaultUserPlatformInfo_Call{Call: _e.mock.On("GetDefaultUserPlatformInfo", ctx, projecID, platformID)}
}

func (_c *MockService_GetDefaultUserPlatformInfo_Call) Run(run func(ctx context.Context, projecID string, platformID string)) *MockService_GetDefaultUserPlatformInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_GetDefaultUserPlatformInfo_Call) Return(_a0 *UserPlatformInfo, _a1 error) *MockService_GetDefaultUserPlatformInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetDefaultUserPlatformInfo_Call) RunAndReturn(run func(context.Context, string, string) (*UserPlatformInfo, error)) *MockService_GetDefaultUserPlatformInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnabledSocialPlatforms provides a mock function with given fields: ctx, projectID
func (_m *MockService) GetEnabledSocialPlatforms(ctx context.Context, projectID string) ([]SocialPlatform, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetEnabledSocialPlatforms")
	}

	var r0 []SocialPlatform
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]SocialPlatform, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []SocialPlatform); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]SocialPlatform)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetEnabledSocialPlatforms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnabledSocialPlatforms'
type MockService_GetEnabledSocialPlatforms_Call struct {
	*mock.Call
}

// GetEnabledSocialPlatforms is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockService_Expecter) GetEnabledSocialPlatforms(ctx interface{}, projectID interface{}) *MockService_GetEnabledSocialPlatforms_Call {
	return &MockService_GetEnabledSocialPlatforms_Call{Call: _e.mock.On("GetEnabledSocialPlatforms", ctx, projectID)}
}

func (_c *MockService_GetEnabledSocialPlatforms_Call) Run(run func(ctx context.Context, projectID string)) *MockService_GetEnabledSocialPlatforms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetEnabledSocialPlatforms_Call) Return(_a0 []SocialPlatform, _a1 error) *MockService_GetEnabledSocialPlatforms_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetEnabledSocialPlatforms_Call) RunAndReturn(run func(context.Context, string) ([]SocialPlatform, error)) *MockService_GetEnabledSocialPlatforms_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: ctx, projectID
func (_m *MockService) GetProject(ctx context.Context, projectID string) (*ProjectResponse, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *ProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ProjectResponse, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ProjectResponse); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockService_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockService_Expecter) GetProject(ctx interface{}, projectID interface{}) *MockService_GetProject_Call {
	return &MockService_GetProject_Call{Call: _e.mock.On("GetProject", ctx, projectID)}
}

func (_c *MockService_GetProject_Call) Run(run func(ctx context.Context, projectID string)) *MockService_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetProject_Call) Return(_a0 *ProjectResponse, _a1 error) *MockService_GetProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetProject_Call) RunAndReturn(run func(context.Context, string) (*ProjectResponse, error)) *MockService_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectSchedule provides a mock function with given fields: ctx, projectID
func (_m *MockService) GetProjectSchedule(ctx context.Context, projectID string) (*WeeklyPostSchedule, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectSchedule")
	}

	var r0 *WeeklyPostSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*WeeklyPostSchedule, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *WeeklyPostSchedule); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WeeklyPostSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetProjectSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectSchedule'
type MockService_GetProjectSchedule_Call struct {
	*mock.Call
}

// GetProjectSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockService_Expecter) GetProjectSchedule(ctx interface{}, projectID interface{}) *MockService_GetProjectSchedule_Call {
	return &MockService_GetProjectSchedule_Call{Call: _e.mock.On("GetProjectSchedule", ctx, projectID)}
}

func (_c *MockService_GetProjectSchedule_Call) Run(run func(ctx context.Context, projectID string)) *MockService_GetProjectSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetProjectSchedule_Call) Return(_a0 *WeeklyPostSchedule, _a1 error) *MockService_GetProjectSchedule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetProjectSchedule_Call) RunAndReturn(run func(context.Context, string) (*WeeklyPostSchedule, error)) *MockService_GetProjectSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function with given fields: ctx, userID, projectID
func (_m *MockService) GetUserRoles(ctx context.Context, userID string, projectID string) ([]string, error) {
	ret := _m.Called(ctx, userID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]string, error)); ok {
		return rf(ctx, userID, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = rf(ctx, userID, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type MockService_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - projectID string
func (_e *MockService_Expecter) GetUserRoles(ctx interface{}, userID interface{}, projectID interface{}) *MockService_GetUserRoles_Call {
	return &MockService_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx, userID, projectID)}
}

func (_c *MockService_GetUserRoles_Call) Run(run func(ctx context.Context, userID string, projectID string)) *MockService_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_GetUserRoles_Call) Return(_a0 []string, _a1 error) *MockService_GetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetUserRoles_Call) RunAndReturn(run func(context.Context, string, string) ([]string, error)) *MockService_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// IsProjectTimeToPublish provides a mock function with given fields: ctx, projectID
func (_m *MockService) IsProjectTimeToPublish(ctx context.Context, projectID string) (bool, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for IsProjectTimeToPublish")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_IsProjectTimeToPublish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsProjectTimeToPublish'
type MockService_IsProjectTimeToPublish_Call struct {
	*mock.Call
}

// IsProjectTimeToPublish is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockService_Expecter) IsProjectTimeToPublish(ctx interface{}, projectID interface{}) *MockService_IsProjectTimeToPublish_Call {
	return &MockService_IsProjectTimeToPublish_Call{Call: _e.mock.On("IsProjectTimeToPublish", ctx, projectID)}
}

func (_c *MockService_IsProjectTimeToPublish_Call) Run(run func(ctx context.Context, projectID string)) *MockService_IsProjectTimeToPublish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_IsProjectTimeToPublish_Call) Return(_a0 bool, _a1 error) *MockService_IsProjectTimeToPublish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_IsProjectTimeToPublish_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockService_IsProjectTimeToPublish_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjects provides a mock function with given fields: ctx
func (_m *MockService) ListProjects(ctx context.Context) ([]*Project, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 []*Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Project, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Project); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type MockService_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) ListProjects(ctx interface{}) *MockService_ListProjects_Call {
	return &MockService_ListProjects_Call{Call: _e.mock.On("ListProjects", ctx)}
}

func (_c *MockService_ListProjects_Call) Run(run func(ctx context.Context)) *MockService_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_ListProjects_Call) Return(_a0 []*Project, _a1 error) *MockService_ListProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_ListProjects_Call) RunAndReturn(run func(context.Context) ([]*Project, error)) *MockService_ListProjects_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTimeSlot provides a mock function with given fields: ctx, projectID, dayOfWeek, hour, minute
func (_m *MockService) RemoveTimeSlot(ctx context.Context, projectID string, dayOfWeek time.Weekday, hour int, minute int) error {
	ret := _m.Called(ctx, projectID, dayOfWeek, hour, minute)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTimeSlot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Weekday, int, int) error); ok {
		r0 = rf(ctx, projectID, dayOfWeek, hour, minute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RemoveTimeSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTimeSlot'
type MockService_RemoveTimeSlot_Call struct {
	*mock.Call
}

// RemoveTimeSlot is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - dayOfWeek time.Weekday
//   - hour int
//   - minute int
func (_e *MockService_Expecter) RemoveTimeSlot(ctx interface{}, projectID interface{}, dayOfWeek interface{}, hour interface{}, minute interface{}) *MockService_RemoveTimeSlot_Call {
	return &MockService_RemoveTimeSlot_Call{Call: _e.mock.On("RemoveTimeSlot", ctx, projectID, dayOfWeek, hour, minute)}
}

func (_c *MockService_RemoveTimeSlot_Call) Run(run func(ctx context.Context, projectID string, dayOfWeek time.Weekday, hour int, minute int)) *MockService_RemoveTimeSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Weekday), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *MockService_RemoveTimeSlot_Call) Return(_a0 error) *MockService_RemoveTimeSlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RemoveTimeSlot_Call) RunAndReturn(run func(context.Context, string, time.Weekday, int, int) error) *MockService_RemoveTimeSlot_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromProject provides a mock function with given fields: ctx, projectID, userID
func (_m *MockService) RemoveUserFromProject(ctx context.Context, projectID string, userID string) error {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RemoveUserFromProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromProject'
type MockService_RemoveUserFromProject_Call struct {
	*mock.Call
}

// RemoveUserFromProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - userID string
func (_e *MockService_Expecter) RemoveUserFromProject(ctx interface{}, projectID interface{}, userID interface{}) *MockService_RemoveUserFromProject_Call {
	return &MockService_RemoveUserFromProject_Call{Call: _e.mock.On("RemoveUserFromProject", ctx, projectID, userID)}
}

func (_c *MockService_RemoveUserFromProject_Call) Run(run func(ctx context.Context, projectID string, userID string)) *MockService_RemoveUserFromProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_RemoveUserFromProject_Call) Return(_a0 error) *MockService_RemoveUserFromProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RemoveUserFromProject_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_RemoveUserFromProject_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserRole provides a mock function with given fields: ctx, projectID, userID, role
func (_m *MockService) RemoveUserRole(ctx context.Context, projectID string, userID string, role int) error {
	ret := _m.Called(ctx, projectID, userID, role)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, projectID, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RemoveUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserRole'
type MockService_RemoveUserRole_Call struct {
	*mock.Call
}

// RemoveUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - userID string
//   - role int
func (_e *MockService_Expecter) RemoveUserRole(ctx interface{}, projectID interface{}, userID interface{}, role interface{}) *MockService_RemoveUserRole_Call {
	return &MockService_RemoveUserRole_Call{Call: _e.mock.On("RemoveUserRole", ctx, projectID, userID, role)}
}

func (_c *MockService_RemoveUserRole_Call) Run(run func(ctx context.Context, projectID string, userID string, role int)) *MockService_RemoveUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockService_RemoveUserRole_Call) Return(_a0 error) *MockService_RemoveUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RemoveUserRole_Call) RunAndReturn(run func(context.Context, string, string, int) error) *MockService_RemoveUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultUser provides a mock function with given fields: ctx, projectID, userID
func (_m *MockService) SetDefaultUser(ctx context.Context, projectID string, userID string) error {
	ret := _m.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SetDefaultUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultUser'
type MockService_SetDefaultUser_Call struct {
	*mock.Call
}

// SetDefaultUser is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - userID string
func (_e *MockService_Expecter) SetDefaultUser(ctx interface{}, projectID interface{}, userID interface{}) *MockService_SetDefaultUser_Call {
	return &MockService_SetDefaultUser_Call{Call: _e.mock.On("SetDefaultUser", ctx, projectID, userID)}
}

func (_c *MockService_SetDefaultUser_Call) Run(run func(ctx context.Context, projectID string, userID string)) *MockService_SetDefaultUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_SetDefaultUser_Call) Return(_a0 error) *MockService_SetDefaultUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SetDefaultUser_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_SetDefaultUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function with given fields: ctx, projectID, name, description
func (_m *MockService) UpdateProject(ctx context.Context, projectID string, name string, description string) (*Project, error) {
	ret := _m.Called(ctx, projectID, name, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*Project, error)); ok {
		return rf(ctx, projectID, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *Project); ok {
		r0 = rf(ctx, projectID, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type MockService_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - name string
//   - description string
func (_e *MockService_Expecter) UpdateProject(ctx interface{}, projectID interface{}, name interface{}, description interface{}) *MockService_UpdateProject_Call {
	return &MockService_UpdateProject_Call{Call: _e.mock.On("UpdateProject", ctx, projectID, name, description)}
}

func (_c *MockService_UpdateProject_Call) Run(run func(ctx context.Context, projectID string, name string, description string)) *MockService_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_UpdateProject_Call) Return(_a0 *Project, _a1 error) *MockService_UpdateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_UpdateProject_Call) RunAndReturn(run func(context.Context, string, string, string) (*Project, error)) *MockService_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
