// Code generated by mockery v2.52.2. DO NOT EDIT.

package media

import mock "github.com/stretchr/testify/mock"

// MockMediaProcessor is an autogenerated mock type for the MediaProcessor type
type MockMediaProcessor struct {
	mock.Mock
}

type MockMediaProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMediaProcessor) EXPECT() *MockMediaProcessor_Expecter {
	return &MockMediaProcessor_Expecter{mock: &_m.Mock}
}

// Analyze provides a mock function with given fields: data
func (_m *MockMediaProcessor) Analyze(data []byte) (*MediaInfo, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Analyze")
	}

	var r0 *MediaInfo
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*MediaInfo, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) *MediaInfo); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MediaInfo)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMediaProcessor_Analyze_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Analyze'
type MockMediaProcessor_Analyze_Call struct {
	*mock.Call
}

// Analyze is a helper method to define mock.On call
//   - data []byte
func (_e *MockMediaProcessor_Expecter) Analyze(data interface{}) *MockMediaProcessor_Analyze_Call {
	return &MockMediaProcessor_Analyze_Call{Call: _e.mock.On("Analyze", data)}
}

func (_c *MockMediaProcessor_Analyze_Call) Run(run func(data []byte)) *MockMediaProcessor_Analyze_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockMediaProcessor_Analyze_Call) Return(_a0 *MediaInfo, _a1 error) *MockMediaProcessor_Analyze_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMediaProcessor_Analyze_Call) RunAndReturn(run func([]byte) (*MediaInfo, error)) *MockMediaProcessor_Analyze_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaType provides a mock function with no fields
func (_m *MockMediaProcessor) GetMediaType() MediaType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMediaType")
	}

	var r0 MediaType
	if rf, ok := ret.Get(0).(func() MediaType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(MediaType)
	}

	return r0
}

// MockMediaProcessor_GetMediaType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaType'
type MockMediaProcessor_GetMediaType_Call struct {
	*mock.Call
}

// GetMediaType is a helper method to define mock.On call
func (_e *MockMediaProcessor_Expecter) GetMediaType() *MockMediaProcessor_GetMediaType_Call {
	return &MockMediaProcessor_GetMediaType_Call{Call: _e.mock.On("GetMediaType")}
}

func (_c *MockMediaProcessor_GetMediaType_Call) Run(run func()) *MockMediaProcessor_GetMediaType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMediaProcessor_GetMediaType_Call) Return(_a0 MediaType) *MockMediaProcessor_GetMediaType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMediaProcessor_GetMediaType_Call) RunAndReturn(run func() MediaType) *MockMediaProcessor_GetMediaType_Call {
	_c.Call.Return(run)
	return _c
}

// GetThumbnail provides a mock function with given fields: data
func (_m *MockMediaProcessor) GetThumbnail(data []byte) (*[]byte, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for GetThumbnail")
	}

	var r0 *[]byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*[]byte, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) *[]byte); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMediaProcessor_GetThumbnail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThumbnail'
type MockMediaProcessor_GetThumbnail_Call struct {
	*mock.Call
}

// GetThumbnail is a helper method to define mock.On call
//   - data []byte
func (_e *MockMediaProcessor_Expecter) GetThumbnail(data interface{}) *MockMediaProcessor_GetThumbnail_Call {
	return &MockMediaProcessor_GetThumbnail_Call{Call: _e.mock.On("GetThumbnail", data)}
}

func (_c *MockMediaProcessor_GetThumbnail_Call) Run(run func(data []byte)) *MockMediaProcessor_GetThumbnail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockMediaProcessor_GetThumbnail_Call) Return(_a0 *[]byte, _a1 error) *MockMediaProcessor_GetThumbnail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMediaProcessor_GetThumbnail_Call) RunAndReturn(run func([]byte) (*[]byte, error)) *MockMediaProcessor_GetThumbnail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMediaProcessor creates a new instance of MockMediaProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMediaProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMediaProcessor {
	mock := &MockMediaProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
