// Code generated by mockery v2.52.2. DO NOT EDIT.

package media

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// DeleteMetadata provides a mock function with given fields: ctx, mediaID
func (_m *MockRepository) DeleteMetadata(ctx context.Context, mediaID string) error {
	ret := _m.Called(ctx, mediaID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, mediaID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMetadata'
type MockRepository_DeleteMetadata_Call struct {
	*mock.Call
}

// DeleteMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - mediaID string
func (_e *MockRepository_Expecter) DeleteMetadata(ctx interface{}, mediaID interface{}) *MockRepository_DeleteMetadata_Call {
	return &MockRepository_DeleteMetadata_Call{Call: _e.mock.On("DeleteMetadata", ctx, mediaID)}
}

func (_c *MockRepository_DeleteMetadata_Call) Run(run func(ctx context.Context, mediaID string)) *MockRepository_DeleteMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_DeleteMetadata_Call) Return(_a0 error) *MockRepository_DeleteMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteMetadata_Call) RunAndReturn(run func(context.Context, string) error) *MockRepository_DeleteMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// DoesMediaBelongToPost provides a mock function with given fields: ctx, postID, mediaID
func (_m *MockRepository) DoesMediaBelongToPost(ctx context.Context, postID string, mediaID string) (bool, error) {
	ret := _m.Called(ctx, postID, mediaID)

	if len(ret) == 0 {
		panic("no return value specified for DoesMediaBelongToPost")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, postID, mediaID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, postID, mediaID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, postID, mediaID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_DoesMediaBelongToPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoesMediaBelongToPost'
type MockRepository_DoesMediaBelongToPost_Call struct {
	*mock.Call
}

// DoesMediaBelongToPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
//   - mediaID string
func (_e *MockRepository_Expecter) DoesMediaBelongToPost(ctx interface{}, postID interface{}, mediaID interface{}) *MockRepository_DoesMediaBelongToPost_Call {
	return &MockRepository_DoesMediaBelongToPost_Call{Call: _e.mock.On("DoesMediaBelongToPost", ctx, postID, mediaID)}
}

func (_c *MockRepository_DoesMediaBelongToPost_Call) Run(run func(ctx context.Context, postID string, mediaID string)) *MockRepository_DoesMediaBelongToPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_DoesMediaBelongToPost_Call) Return(_a0 bool, _a1 error) *MockRepository_DoesMediaBelongToPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_DoesMediaBelongToPost_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockRepository_DoesMediaBelongToPost_Call {
	_c.Call.Return(run)
	return _c
}

// DoesPostBelongToProject provides a mock function with given fields: ctx, projectID, postID
func (_m *MockRepository) DoesPostBelongToProject(ctx context.Context, projectID string, postID string) (bool, error) {
	ret := _m.Called(ctx, projectID, postID)

	if len(ret) == 0 {
		panic("no return value specified for DoesPostBelongToProject")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, projectID, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, projectID, postID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_DoesPostBelongToProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoesPostBelongToProject'
type MockRepository_DoesPostBelongToProject_Call struct {
	*mock.Call
}

// DoesPostBelongToProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
func (_e *MockRepository_Expecter) DoesPostBelongToProject(ctx interface{}, projectID interface{}, postID interface{}) *MockRepository_DoesPostBelongToProject_Call {
	return &MockRepository_DoesPostBelongToProject_Call{Call: _e.mock.On("DoesPostBelongToProject", ctx, projectID, postID)}
}

func (_c *MockRepository_DoesPostBelongToProject_Call) Run(run func(ctx context.Context, projectID string, postID string)) *MockRepository_DoesPostBelongToProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_DoesPostBelongToProject_Call) Return(_a0 bool, _a1 error) *MockRepository_DoesPostBelongToProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_DoesPostBelongToProject_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockRepository_DoesPostBelongToProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaFileName provides a mock function with given fields: ctx, mediaID
func (_m *MockRepository) GetMediaFileName(ctx context.Context, mediaID string) (string, error) {
	ret := _m.Called(ctx, mediaID)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaFileName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, mediaID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, mediaID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, mediaID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetMediaFileName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaFileName'
type MockRepository_GetMediaFileName_Call struct {
	*mock.Call
}

// GetMediaFileName is a helper method to define mock.On call
//   - ctx context.Context
//   - mediaID string
func (_e *MockRepository_Expecter) GetMediaFileName(ctx interface{}, mediaID interface{}) *MockRepository_GetMediaFileName_Call {
	return &MockRepository_GetMediaFileName_Call{Call: _e.mock.On("GetMediaFileName", ctx, mediaID)}
}

func (_c *MockRepository_GetMediaFileName_Call) Run(run func(ctx context.Context, mediaID string)) *MockRepository_GetMediaFileName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetMediaFileName_Call) Return(_a0 string, _a1 error) *MockRepository_GetMediaFileName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetMediaFileName_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockRepository_GetMediaFileName_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaFileNamesForPublishPost provides a mock function with given fields: ctx, postID, platformID
func (_m *MockRepository) GetMediaFileNamesForPublishPost(ctx context.Context, postID string, platformID string) ([]string, error) {
	ret := _m.Called(ctx, postID, platformID)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaFileNamesForPublishPost")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]string, error)); ok {
		return rf(ctx, postID, platformID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = rf(ctx, postID, platformID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, postID, platformID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetMediaFileNamesForPublishPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaFileNamesForPublishPost'
type MockRepository_GetMediaFileNamesForPublishPost_Call struct {
	*mock.Call
}

// GetMediaFileNamesForPublishPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
//   - platformID string
func (_e *MockRepository_Expecter) GetMediaFileNamesForPublishPost(ctx interface{}, postID interface{}, platformID interface{}) *MockRepository_GetMediaFileNamesForPublishPost_Call {
	return &MockRepository_GetMediaFileNamesForPublishPost_Call{Call: _e.mock.On("GetMediaFileNamesForPublishPost", ctx, postID, platformID)}
}

func (_c *MockRepository_GetMediaFileNamesForPublishPost_Call) Run(run func(ctx context.Context, postID string, platformID string)) *MockRepository_GetMediaFileNamesForPublishPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_GetMediaFileNamesForPublishPost_Call) Return(_a0 []string, _a1 error) *MockRepository_GetMediaFileNamesForPublishPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetMediaFileNamesForPublishPost_Call) RunAndReturn(run func(context.Context, string, string) ([]string, error)) *MockRepository_GetMediaFileNamesForPublishPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadata provides a mock function with given fields: ctx, postID, fileName
func (_m *MockRepository) GetMetadata(ctx context.Context, postID string, fileName string) (*MetaData, error) {
	ret := _m.Called(ctx, postID, fileName)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 *MetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*MetaData, error)); ok {
		return rf(ctx, postID, fileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *MetaData); ok {
		r0 = rf(ctx, postID, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MetaData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, postID, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadata'
type MockRepository_GetMetadata_Call struct {
	*mock.Call
}

// GetMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
//   - fileName string
func (_e *MockRepository_Expecter) GetMetadata(ctx interface{}, postID interface{}, fileName interface{}) *MockRepository_GetMetadata_Call {
	return &MockRepository_GetMetadata_Call{Call: _e.mock.On("GetMetadata", ctx, postID, fileName)}
}

func (_c *MockRepository_GetMetadata_Call) Run(run func(ctx context.Context, postID string, fileName string)) *MockRepository_GetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_GetMetadata_Call) Return(_a0 *MetaData, _a1 error) *MockRepository_GetMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetMetadata_Call) RunAndReturn(run func(context.Context, string, string) (*MetaData, error)) *MockRepository_GetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// IsMediaLinkedToPublishPost provides a mock function with given fields: ctx, postID, mediaID, platformID
func (_m *MockRepository) IsMediaLinkedToPublishPost(ctx context.Context, postID string, mediaID string, platformID string) (bool, error) {
	ret := _m.Called(ctx, postID, mediaID, platformID)

	if len(ret) == 0 {
		panic("no return value specified for IsMediaLinkedToPublishPost")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, postID, mediaID, platformID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, postID, mediaID, platformID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, postID, mediaID, platformID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_IsMediaLinkedToPublishPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMediaLinkedToPublishPost'
type MockRepository_IsMediaLinkedToPublishPost_Call struct {
	*mock.Call
}

// IsMediaLinkedToPublishPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
//   - mediaID string
//   - platformID string
func (_e *MockRepository_Expecter) IsMediaLinkedToPublishPost(ctx interface{}, postID interface{}, mediaID interface{}, platformID interface{}) *MockRepository_IsMediaLinkedToPublishPost_Call {
	return &MockRepository_IsMediaLinkedToPublishPost_Call{Call: _e.mock.On("IsMediaLinkedToPublishPost", ctx, postID, mediaID, platformID)}
}

func (_c *MockRepository_IsMediaLinkedToPublishPost_Call) Run(run func(ctx context.Context, postID string, mediaID string, platformID string)) *MockRepository_IsMediaLinkedToPublishPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRepository_IsMediaLinkedToPublishPost_Call) Return(_a0 bool, _a1 error) *MockRepository_IsMediaLinkedToPublishPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_IsMediaLinkedToPublishPost_Call) RunAndReturn(run func(context.Context, string, string, string) (bool, error)) *MockRepository_IsMediaLinkedToPublishPost_Call {
	_c.Call.Return(run)
	return _c
}

// IsPlatformEnabledForProject provides a mock function with given fields: ctx, projectID, platformID
func (_m *MockRepository) IsPlatformEnabledForProject(ctx context.Context, projectID string, platformID string) (bool, error) {
	ret := _m.Called(ctx, projectID, platformID)

	if len(ret) == 0 {
		panic("no return value specified for IsPlatformEnabledForProject")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, projectID, platformID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, projectID, platformID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, platformID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_IsPlatformEnabledForProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPlatformEnabledForProject'
type MockRepository_IsPlatformEnabledForProject_Call struct {
	*mock.Call
}

// IsPlatformEnabledForProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - platformID string
func (_e *MockRepository_Expecter) IsPlatformEnabledForProject(ctx interface{}, projectID interface{}, platformID interface{}) *MockRepository_IsPlatformEnabledForProject_Call {
	return &MockRepository_IsPlatformEnabledForProject_Call{Call: _e.mock.On("IsPlatformEnabledForProject", ctx, projectID, platformID)}
}

func (_c *MockRepository_IsPlatformEnabledForProject_Call) Run(run func(ctx context.Context, projectID string, platformID string)) *MockRepository_IsPlatformEnabledForProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_IsPlatformEnabledForProject_Call) Return(_a0 bool, _a1 error) *MockRepository_IsPlatformEnabledForProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_IsPlatformEnabledForProject_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockRepository_IsPlatformEnabledForProject_Call {
	_c.Call.Return(run)
	return _c
}

// IsThePostEnabledToPlatform provides a mock function with given fields: ctx, postID, platformID
func (_m *MockRepository) IsThePostEnabledToPlatform(ctx context.Context, postID string, platformID string) (bool, error) {
	ret := _m.Called(ctx, postID, platformID)

	if len(ret) == 0 {
		panic("no return value specified for IsThePostEnabledToPlatform")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, postID, platformID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, postID, platformID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, postID, platformID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_IsThePostEnabledToPlatform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsThePostEnabledToPlatform'
type MockRepository_IsThePostEnabledToPlatform_Call struct {
	*mock.Call
}

// IsThePostEnabledToPlatform is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
//   - platformID string
func (_e *MockRepository_Expecter) IsThePostEnabledToPlatform(ctx interface{}, postID interface{}, platformID interface{}) *MockRepository_IsThePostEnabledToPlatform_Call {
	return &MockRepository_IsThePostEnabledToPlatform_Call{Call: _e.mock.On("IsThePostEnabledToPlatform", ctx, postID, platformID)}
}

func (_c *MockRepository_IsThePostEnabledToPlatform_Call) Run(run func(ctx context.Context, postID string, platformID string)) *MockRepository_IsThePostEnabledToPlatform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_IsThePostEnabledToPlatform_Call) Return(_a0 bool, _a1 error) *MockRepository_IsThePostEnabledToPlatform_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_IsThePostEnabledToPlatform_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockRepository_IsThePostEnabledToPlatform_Call {
	_c.Call.Return(run)
	return _c
}

// LinkMediaToPublishPost provides a mock function with given fields: ctx, postID, fileName, platformID
func (_m *MockRepository) LinkMediaToPublishPost(ctx context.Context, postID string, fileName string, platformID string) error {
	ret := _m.Called(ctx, postID, fileName, platformID)

	if len(ret) == 0 {
		panic("no return value specified for LinkMediaToPublishPost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, postID, fileName, platformID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_LinkMediaToPublishPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkMediaToPublishPost'
type MockRepository_LinkMediaToPublishPost_Call struct {
	*mock.Call
}

// LinkMediaToPublishPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
//   - fileName string
//   - platformID string
func (_e *MockRepository_Expecter) LinkMediaToPublishPost(ctx interface{}, postID interface{}, fileName interface{}, platformID interface{}) *MockRepository_LinkMediaToPublishPost_Call {
	return &MockRepository_LinkMediaToPublishPost_Call{Call: _e.mock.On("LinkMediaToPublishPost", ctx, postID, fileName, platformID)}
}

func (_c *MockRepository_LinkMediaToPublishPost_Call) Run(run func(ctx context.Context, postID string, fileName string, platformID string)) *MockRepository_LinkMediaToPublishPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRepository_LinkMediaToPublishPost_Call) Return(_a0 error) *MockRepository_LinkMediaToPublishPost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_LinkMediaToPublishPost_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockRepository_LinkMediaToPublishPost_Call {
	_c.Call.Return(run)
	return _c
}

// ListMediaFilesForPost provides a mock function with given fields: ctx, postID
func (_m *MockRepository) ListMediaFilesForPost(ctx context.Context, postID string) ([]string, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for ListMediaFilesForPost")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_ListMediaFilesForPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMediaFilesForPost'
type MockRepository_ListMediaFilesForPost_Call struct {
	*mock.Call
}

// ListMediaFilesForPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
func (_e *MockRepository_Expecter) ListMediaFilesForPost(ctx interface{}, postID interface{}) *MockRepository_ListMediaFilesForPost_Call {
	return &MockRepository_ListMediaFilesForPost_Call{Call: _e.mock.On("ListMediaFilesForPost", ctx, postID)}
}

func (_c *MockRepository_ListMediaFilesForPost_Call) Run(run func(ctx context.Context, postID string)) *MockRepository_ListMediaFilesForPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_ListMediaFilesForPost_Call) Return(_a0 []string, _a1 error) *MockRepository_ListMediaFilesForPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_ListMediaFilesForPost_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *MockRepository_ListMediaFilesForPost_Call {
	_c.Call.Return(run)
	return _c
}

// SaveMetadata provides a mock function with given fields: ctx, _a1
func (_m *MockRepository) SaveMetadata(ctx context.Context, _a1 *MetaData) (*MetaData, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveMetadata")
	}

	var r0 *MetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MetaData) (*MetaData, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MetaData) *MetaData); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MetaData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MetaData) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_SaveMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveMetadata'
type MockRepository_SaveMetadata_Call struct {
	*mock.Call
}

// SaveMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *MetaData
func (_e *MockRepository_Expecter) SaveMetadata(ctx interface{}, _a1 interface{}) *MockRepository_SaveMetadata_Call {
	return &MockRepository_SaveMetadata_Call{Call: _e.mock.On("SaveMetadata", ctx, _a1)}
}

func (_c *MockRepository_SaveMetadata_Call) Run(run func(ctx context.Context, _a1 *MetaData)) *MockRepository_SaveMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MetaData))
	})
	return _c
}

func (_c *MockRepository_SaveMetadata_Call) Return(_a0 *MetaData, _a1 error) *MockRepository_SaveMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_SaveMetadata_Call) RunAndReturn(run func(context.Context, *MetaData) (*MetaData, error)) *MockRepository_SaveMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// UnlinkMediaFromPublishPost provides a mock function with given fields: ctx, postID, fileName, platformID
func (_m *MockRepository) UnlinkMediaFromPublishPost(ctx context.Context, postID string, fileName string, platformID string) error {
	ret := _m.Called(ctx, postID, fileName, platformID)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkMediaFromPublishPost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, postID, fileName, platformID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_UnlinkMediaFromPublishPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlinkMediaFromPublishPost'
type MockRepository_UnlinkMediaFromPublishPost_Call struct {
	*mock.Call
}

// UnlinkMediaFromPublishPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
//   - fileName string
//   - platformID string
func (_e *MockRepository_Expecter) UnlinkMediaFromPublishPost(ctx interface{}, postID interface{}, fileName interface{}, platformID interface{}) *MockRepository_UnlinkMediaFromPublishPost_Call {
	return &MockRepository_UnlinkMediaFromPublishPost_Call{Call: _e.mock.On("UnlinkMediaFromPublishPost", ctx, postID, fileName, platformID)}
}

func (_c *MockRepository_UnlinkMediaFromPublishPost_Call) Run(run func(ctx context.Context, postID string, fileName string, platformID string)) *MockRepository_UnlinkMediaFromPublishPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRepository_UnlinkMediaFromPublishPost_Call) Return(_a0 error) *MockRepository_UnlinkMediaFromPublishPost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_UnlinkMediaFromPublishPost_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockRepository_UnlinkMediaFromPublishPost_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
