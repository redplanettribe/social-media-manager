// Code generated by mockery v2.52.2. DO NOT EDIT.

package media

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// DeleteMedia provides a mock function with given fields: ctx, projectID, postID, fileID
func (_m *MockService) DeleteMedia(ctx context.Context, projectID string, postID string, fileID string) error {
	ret := _m.Called(ctx, projectID, postID, fileID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMedia")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, projectID, postID, fileID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_DeleteMedia_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMedia'
type MockService_DeleteMedia_Call struct {
	*mock.Call
}

// DeleteMedia is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - fileID string
func (_e *MockService_Expecter) DeleteMedia(ctx interface{}, projectID interface{}, postID interface{}, fileID interface{}) *MockService_DeleteMedia_Call {
	return &MockService_DeleteMedia_Call{Call: _e.mock.On("DeleteMedia", ctx, projectID, postID, fileID)}
}

func (_c *MockService_DeleteMedia_Call) Run(run func(ctx context.Context, projectID string, postID string, fileID string)) *MockService_DeleteMedia_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_DeleteMedia_Call) Return(_a0 error) *MockService_DeleteMedia_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_DeleteMedia_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockService_DeleteMedia_Call {
	_c.Call.Return(run)
	return _c
}

// GetDownloadMetaData provides a mock function with given fields: ctx, projectID, postID, fileName
func (_m *MockService) GetDownloadMetaData(ctx context.Context, projectID string, postID string, fileName string) (DownloadMetaData, error) {
	ret := _m.Called(ctx, projectID, postID, fileName)

	if len(ret) == 0 {
		panic("no return value specified for GetDownloadMetaData")
	}

	var r0 DownloadMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (DownloadMetaData, error)); ok {
		return rf(ctx, projectID, postID, fileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) DownloadMetaData); ok {
		r0 = rf(ctx, projectID, postID, fileName)
	} else {
		r0 = ret.Get(0).(DownloadMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, postID, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetDownloadMetaData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownloadMetaData'
type MockService_GetDownloadMetaData_Call struct {
	*mock.Call
}

// GetDownloadMetaData is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - fileName string
func (_e *MockService_Expecter) GetDownloadMetaData(ctx interface{}, projectID interface{}, postID interface{}, fileName interface{}) *MockService_GetDownloadMetaData_Call {
	return &MockService_GetDownloadMetaData_Call{Call: _e.mock.On("GetDownloadMetaData", ctx, projectID, postID, fileName)}
}

func (_c *MockService_GetDownloadMetaData_Call) Run(run func(ctx context.Context, projectID string, postID string, fileName string)) *MockService_GetDownloadMetaData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_GetDownloadMetaData_Call) Return(_a0 DownloadMetaData, _a1 error) *MockService_GetDownloadMetaData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetDownloadMetaData_Call) RunAndReturn(run func(context.Context, string, string, string) (DownloadMetaData, error)) *MockService_GetDownloadMetaData_Call {
	_c.Call.Return(run)
	return _c
}

// GetDownloadMetadataDataForPost provides a mock function with given fields: ctx, projectID, postID
func (_m *MockService) GetDownloadMetadataDataForPost(ctx context.Context, projectID string, postID string) ([]*DownloadMetaData, error) {
	ret := _m.Called(ctx, projectID, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetDownloadMetadataDataForPost")
	}

	var r0 []*DownloadMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*DownloadMetaData, error)); ok {
		return rf(ctx, projectID, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*DownloadMetaData); ok {
		r0 = rf(ctx, projectID, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*DownloadMetaData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetDownloadMetadataDataForPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownloadMetadataDataForPost'
type MockService_GetDownloadMetadataDataForPost_Call struct {
	*mock.Call
}

// GetDownloadMetadataDataForPost is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
func (_e *MockService_Expecter) GetDownloadMetadataDataForPost(ctx interface{}, projectID interface{}, postID interface{}) *MockService_GetDownloadMetadataDataForPost_Call {
	return &MockService_GetDownloadMetadataDataForPost_Call{Call: _e.mock.On("GetDownloadMetadataDataForPost", ctx, projectID, postID)}
}

func (_c *MockService_GetDownloadMetadataDataForPost_Call) Run(run func(ctx context.Context, projectID string, postID string)) *MockService_GetDownloadMetadataDataForPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_GetDownloadMetadataDataForPost_Call) Return(_a0 []*DownloadMetaData, _a1 error) *MockService_GetDownloadMetadataDataForPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetDownloadMetadataDataForPost_Call) RunAndReturn(run func(context.Context, string, string) ([]*DownloadMetaData, error)) *MockService_GetDownloadMetadataDataForPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetDownloadMetadataForPublishPost provides a mock function with given fields: ctx, projectID, postID, platformID
func (_m *MockService) GetDownloadMetadataForPublishPost(ctx context.Context, projectID string, postID string, platformID string) ([]*DownloadMetaData, error) {
	ret := _m.Called(ctx, projectID, postID, platformID)

	if len(ret) == 0 {
		panic("no return value specified for GetDownloadMetadataForPublishPost")
	}

	var r0 []*DownloadMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]*DownloadMetaData, error)); ok {
		return rf(ctx, projectID, postID, platformID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*DownloadMetaData); ok {
		r0 = rf(ctx, projectID, postID, platformID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*DownloadMetaData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, postID, platformID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetDownloadMetadataForPublishPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownloadMetadataForPublishPost'
type MockService_GetDownloadMetadataForPublishPost_Call struct {
	*mock.Call
}

// GetDownloadMetadataForPublishPost is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - platformID string
func (_e *MockService_Expecter) GetDownloadMetadataForPublishPost(ctx interface{}, projectID interface{}, postID interface{}, platformID interface{}) *MockService_GetDownloadMetadataForPublishPost_Call {
	return &MockService_GetDownloadMetadataForPublishPost_Call{Call: _e.mock.On("GetDownloadMetadataForPublishPost", ctx, projectID, postID, platformID)}
}

func (_c *MockService_GetDownloadMetadataForPublishPost_Call) Run(run func(ctx context.Context, projectID string, postID string, platformID string)) *MockService_GetDownloadMetadataForPublishPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_GetDownloadMetadataForPublishPost_Call) Return(_a0 []*DownloadMetaData, _a1 error) *MockService_GetDownloadMetadataForPublishPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetDownloadMetadataForPublishPost_Call) RunAndReturn(run func(context.Context, string, string, string) ([]*DownloadMetaData, error)) *MockService_GetDownloadMetadataForPublishPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaFile provides a mock function with given fields: ctx, projectID, postID, fileName
func (_m *MockService) GetMediaFile(ctx context.Context, projectID string, postID string, fileName string) (*Media, error) {
	ret := _m.Called(ctx, projectID, postID, fileName)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaFile")
	}

	var r0 *Media
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*Media, error)); ok {
		return rf(ctx, projectID, postID, fileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *Media); ok {
		r0 = rf(ctx, projectID, postID, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Media)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, postID, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetMediaFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaFile'
type MockService_GetMediaFile_Call struct {
	*mock.Call
}

// GetMediaFile is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - fileName string
func (_e *MockService_Expecter) GetMediaFile(ctx interface{}, projectID interface{}, postID interface{}, fileName interface{}) *MockService_GetMediaFile_Call {
	return &MockService_GetMediaFile_Call{Call: _e.mock.On("GetMediaFile", ctx, projectID, postID, fileName)}
}

func (_c *MockService_GetMediaFile_Call) Run(run func(ctx context.Context, projectID string, postID string, fileName string)) *MockService_GetMediaFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_GetMediaFile_Call) Return(_a0 *Media, _a1 error) *MockService_GetMediaFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetMediaFile_Call) RunAndReturn(run func(context.Context, string, string, string) (*Media, error)) *MockService_GetMediaFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaForPublishPost provides a mock function with given fields: ctx, projectID, postID, platformID
func (_m *MockService) GetMediaForPublishPost(ctx context.Context, projectID string, postID string, platformID string) ([]*Media, error) {
	ret := _m.Called(ctx, projectID, postID, platformID)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaForPublishPost")
	}

	var r0 []*Media
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]*Media, error)); ok {
		return rf(ctx, projectID, postID, platformID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*Media); ok {
		r0 = rf(ctx, projectID, postID, platformID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Media)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, postID, platformID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetMediaForPublishPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaForPublishPost'
type MockService_GetMediaForPublishPost_Call struct {
	*mock.Call
}

// GetMediaForPublishPost is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - platformID string
func (_e *MockService_Expecter) GetMediaForPublishPost(ctx interface{}, projectID interface{}, postID interface{}, platformID interface{}) *MockService_GetMediaForPublishPost_Call {
	return &MockService_GetMediaForPublishPost_Call{Call: _e.mock.On("GetMediaForPublishPost", ctx, projectID, postID, platformID)}
}

func (_c *MockService_GetMediaForPublishPost_Call) Run(run func(ctx context.Context, projectID string, postID string, platformID string)) *MockService_GetMediaForPublishPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_GetMediaForPublishPost_Call) Return(_a0 []*Media, _a1 error) *MockService_GetMediaForPublishPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetMediaForPublishPost_Call) RunAndReturn(run func(context.Context, string, string, string) ([]*Media, error)) *MockService_GetMediaForPublishPost_Call {
	_c.Call.Return(run)
	return _c
}

// LinkMediaToPublishPost provides a mock function with given fields: ctx, projectID, postID, mediaID, platformID
func (_m *MockService) LinkMediaToPublishPost(ctx context.Context, projectID string, postID string, mediaID string, platformID string) error {
	ret := _m.Called(ctx, projectID, postID, mediaID, platformID)

	if len(ret) == 0 {
		panic("no return value specified for LinkMediaToPublishPost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, projectID, postID, mediaID, platformID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_LinkMediaToPublishPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkMediaToPublishPost'
type MockService_LinkMediaToPublishPost_Call struct {
	*mock.Call
}

// LinkMediaToPublishPost is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - mediaID string
//   - platformID string
func (_e *MockService_Expecter) LinkMediaToPublishPost(ctx interface{}, projectID interface{}, postID interface{}, mediaID interface{}, platformID interface{}) *MockService_LinkMediaToPublishPost_Call {
	return &MockService_LinkMediaToPublishPost_Call{Call: _e.mock.On("LinkMediaToPublishPost", ctx, projectID, postID, mediaID, platformID)}
}

func (_c *MockService_LinkMediaToPublishPost_Call) Run(run func(ctx context.Context, projectID string, postID string, mediaID string, platformID string)) *MockService_LinkMediaToPublishPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockService_LinkMediaToPublishPost_Call) Return(_a0 error) *MockService_LinkMediaToPublishPost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_LinkMediaToPublishPost_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockService_LinkMediaToPublishPost_Call {
	_c.Call.Return(run)
	return _c
}

// UnLinkMediaFromPublishPost provides a mock function with given fields: ctx, projectID, postID, mediaID, platformID
func (_m *MockService) UnLinkMediaFromPublishPost(ctx context.Context, projectID string, postID string, mediaID string, platformID string) error {
	ret := _m.Called(ctx, projectID, postID, mediaID, platformID)

	if len(ret) == 0 {
		panic("no return value specified for UnLinkMediaFromPublishPost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, projectID, postID, mediaID, platformID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_UnLinkMediaFromPublishPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnLinkMediaFromPublishPost'
type MockService_UnLinkMediaFromPublishPost_Call struct {
	*mock.Call
}

// UnLinkMediaFromPublishPost is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - mediaID string
//   - platformID string
func (_e *MockService_Expecter) UnLinkMediaFromPublishPost(ctx interface{}, projectID interface{}, postID interface{}, mediaID interface{}, platformID interface{}) *MockService_UnLinkMediaFromPublishPost_Call {
	return &MockService_UnLinkMediaFromPublishPost_Call{Call: _e.mock.On("UnLinkMediaFromPublishPost", ctx, projectID, postID, mediaID, platformID)}
}

func (_c *MockService_UnLinkMediaFromPublishPost_Call) Run(run func(ctx context.Context, projectID string, postID string, mediaID string, platformID string)) *MockService_UnLinkMediaFromPublishPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockService_UnLinkMediaFromPublishPost_Call) Return(_a0 error) *MockService_UnLinkMediaFromPublishPost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_UnLinkMediaFromPublishPost_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockService_UnLinkMediaFromPublishPost_Call {
	_c.Call.Return(run)
	return _c
}

// UploadMedia provides a mock function with given fields: ctx, projectID, postID, fileName, altText, data
func (_m *MockService) UploadMedia(ctx context.Context, projectID string, postID string, fileName string, altText string, data []byte) (DownloadMetaData, error) {
	ret := _m.Called(ctx, projectID, postID, fileName, altText, data)

	if len(ret) == 0 {
		panic("no return value specified for UploadMedia")
	}

	var r0 DownloadMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []byte) (DownloadMetaData, error)); ok {
		return rf(ctx, projectID, postID, fileName, altText, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []byte) DownloadMetaData); ok {
		r0 = rf(ctx, projectID, postID, fileName, altText, data)
	} else {
		r0 = ret.Get(0).(DownloadMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []byte) error); ok {
		r1 = rf(ctx, projectID, postID, fileName, altText, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_UploadMedia_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadMedia'
type MockService_UploadMedia_Call struct {
	*mock.Call
}

// UploadMedia is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - fileName string
//   - altText string
//   - data []byte
func (_e *MockService_Expecter) UploadMedia(ctx interface{}, projectID interface{}, postID interface{}, fileName interface{}, altText interface{}, data interface{}) *MockService_UploadMedia_Call {
	return &MockService_UploadMedia_Call{Call: _e.mock.On("UploadMedia", ctx, projectID, postID, fileName, altText, data)}
}

func (_c *MockService_UploadMedia_Call) Run(run func(ctx context.Context, projectID string, postID string, fileName string, altText string, data []byte)) *MockService_UploadMedia_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]byte))
	})
	return _c
}

func (_c *MockService_UploadMedia_Call) Return(_a0 DownloadMetaData, _a1 error) *MockService_UploadMedia_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_UploadMedia_Call) RunAndReturn(run func(context.Context, string, string, string, string, []byte) (DownloadMetaData, error)) *MockService_UploadMedia_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
