// Code generated by mockery v2.52.2. DO NOT EDIT.

package media

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockObjectRepository is an autogenerated mock type for the ObjectRepository type
type MockObjectRepository struct {
	mock.Mock
}

type MockObjectRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectRepository) EXPECT() *MockObjectRepository_Expecter {
	return &MockObjectRepository_Expecter{mock: &_m.Mock}
}

// DeleteFile provides a mock function with given fields: ctx, projectID, postID, filename
func (_m *MockObjectRepository) DeleteFile(ctx context.Context, projectID string, postID string, filename string) error {
	ret := _m.Called(ctx, projectID, postID, filename)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, projectID, postID, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectRepository_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type MockObjectRepository_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - filename string
func (_e *MockObjectRepository_Expecter) DeleteFile(ctx interface{}, projectID interface{}, postID interface{}, filename interface{}) *MockObjectRepository_DeleteFile_Call {
	return &MockObjectRepository_DeleteFile_Call{Call: _e.mock.On("DeleteFile", ctx, projectID, postID, filename)}
}

func (_c *MockObjectRepository_DeleteFile_Call) Run(run func(ctx context.Context, projectID string, postID string, filename string)) *MockObjectRepository_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockObjectRepository_DeleteFile_Call) Return(_a0 error) *MockObjectRepository_DeleteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectRepository_DeleteFile_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockObjectRepository_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetFile provides a mock function with given fields: ctx, projectID, postID, filename
func (_m *MockObjectRepository) GetFile(ctx context.Context, projectID string, postID string, filename string) ([]byte, error) {
	ret := _m.Called(ctx, projectID, postID, filename)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]byte, error)); ok {
		return rf(ctx, projectID, postID, filename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []byte); ok {
		r0 = rf(ctx, projectID, postID, filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, postID, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectRepository_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type MockObjectRepository_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - filename string
func (_e *MockObjectRepository_Expecter) GetFile(ctx interface{}, projectID interface{}, postID interface{}, filename interface{}) *MockObjectRepository_GetFile_Call {
	return &MockObjectRepository_GetFile_Call{Call: _e.mock.On("GetFile", ctx, projectID, postID, filename)}
}

func (_c *MockObjectRepository_GetFile_Call) Run(run func(ctx context.Context, projectID string, postID string, filename string)) *MockObjectRepository_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockObjectRepository_GetFile_Call) Return(_a0 []byte, _a1 error) *MockObjectRepository_GetFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectRepository_GetFile_Call) RunAndReturn(run func(context.Context, string, string, string) ([]byte, error)) *MockObjectRepository_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetSignedURL provides a mock function with given fields: ctx, projectID, postID, fileName
func (_m *MockObjectRepository) GetSignedURL(ctx context.Context, projectID string, postID string, fileName string) (string, error) {
	ret := _m.Called(ctx, projectID, postID, fileName)

	if len(ret) == 0 {
		panic("no return value specified for GetSignedURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, projectID, postID, fileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, projectID, postID, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, postID, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectRepository_GetSignedURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSignedURL'
type MockObjectRepository_GetSignedURL_Call struct {
	*mock.Call
}

// GetSignedURL is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - fileName string
func (_e *MockObjectRepository_Expecter) GetSignedURL(ctx interface{}, projectID interface{}, postID interface{}, fileName interface{}) *MockObjectRepository_GetSignedURL_Call {
	return &MockObjectRepository_GetSignedURL_Call{Call: _e.mock.On("GetSignedURL", ctx, projectID, postID, fileName)}
}

func (_c *MockObjectRepository_GetSignedURL_Call) Run(run func(ctx context.Context, projectID string, postID string, fileName string)) *MockObjectRepository_GetSignedURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockObjectRepository_GetSignedURL_Call) Return(_a0 string, _a1 error) *MockObjectRepository_GetSignedURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectRepository_GetSignedURL_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *MockObjectRepository_GetSignedURL_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function with given fields: ctx, projectID, postID, filename, data, metadata
func (_m *MockObjectRepository) UploadFile(ctx context.Context, projectID string, postID string, filename string, data []byte, metadata *MetaData) error {
	ret := _m.Called(ctx, projectID, postID, filename, data, metadata)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []byte, *MetaData) error); ok {
		r0 = rf(ctx, projectID, postID, filename, data, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectRepository_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type MockObjectRepository_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - filename string
//   - data []byte
//   - metadata *MetaData
func (_e *MockObjectRepository_Expecter) UploadFile(ctx interface{}, projectID interface{}, postID interface{}, filename interface{}, data interface{}, metadata interface{}) *MockObjectRepository_UploadFile_Call {
	return &MockObjectRepository_UploadFile_Call{Call: _e.mock.On("UploadFile", ctx, projectID, postID, filename, data, metadata)}
}

func (_c *MockObjectRepository_UploadFile_Call) Run(run func(ctx context.Context, projectID string, postID string, filename string, data []byte, metadata *MetaData)) *MockObjectRepository_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]byte), args[5].(*MetaData))
	})
	return _c
}

func (_c *MockObjectRepository_UploadFile_Call) Return(_a0 error) *MockObjectRepository_UploadFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectRepository_UploadFile_Call) RunAndReturn(run func(context.Context, string, string, string, []byte, *MetaData) error) *MockObjectRepository_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockObjectRepository creates a new instance of MockObjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectRepository {
	mock := &MockObjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
