// Code generated by mockery v2.52.2. DO NOT EDIT.

package user

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// AssignAppRoleToUser provides a mock function with given fields: ctx, userID, roleID
func (_m *MockService) AssignAppRoleToUser(ctx context.Context, userID string, roleID string) error {
	ret := _m.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for AssignAppRoleToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_AssignAppRoleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignAppRoleToUser'
type MockService_AssignAppRoleToUser_Call struct {
	*mock.Call
}

// AssignAppRoleToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - roleID string
func (_e *MockService_Expecter) AssignAppRoleToUser(ctx interface{}, userID interface{}, roleID interface{}) *MockService_AssignAppRoleToUser_Call {
	return &MockService_AssignAppRoleToUser_Call{Call: _e.mock.On("AssignAppRoleToUser", ctx, userID, roleID)}
}

func (_c *MockService_AssignAppRoleToUser_Call) Run(run func(ctx context.Context, userID string, roleID string)) *MockService_AssignAppRoleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_AssignAppRoleToUser_Call) Return(_a0 error) *MockService_AssignAppRoleToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_AssignAppRoleToUser_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_AssignAppRoleToUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, username, firstName, lastName, password, email
func (_m *MockService) CreateUser(ctx context.Context, username string, firstName string, lastName string, password string, email string) (*UserResponse, error) {
	ret := _m.Called(ctx, username, firstName, lastName, password, email)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) (*UserResponse, error)); ok {
		return rf(ctx, username, firstName, lastName, password, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) *UserResponse); ok {
		r0 = rf(ctx, username, firstName, lastName, password, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) error); ok {
		r1 = rf(ctx, username, firstName, lastName, password, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - firstName string
//   - lastName string
//   - password string
//   - email string
func (_e *MockService_Expecter) CreateUser(ctx interface{}, username interface{}, firstName interface{}, lastName interface{}, password interface{}, email interface{}) *MockService_CreateUser_Call {
	return &MockService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, username, firstName, lastName, password, email)}
}

func (_c *MockService_CreateUser_Call) Run(run func(ctx context.Context, username string, firstName string, lastName string, password string, email string)) *MockService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockService_CreateUser_Call) Return(_a0 *UserResponse, _a1 error) *MockService_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_CreateUser_Call) RunAndReturn(run func(context.Context, string, string, string, string, string) (*UserResponse, error)) *MockService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAppRoles provides a mock function with given fields: ctx
func (_m *MockService) GetAllAppRoles(ctx context.Context) (*[]AppRole, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAppRoles")
	}

	var r0 *[]AppRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]AppRole, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]AppRole); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]AppRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetAllAppRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAppRoles'
type MockService_GetAllAppRoles_Call struct {
	*mock.Call
}

// GetAllAppRoles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetAllAppRoles(ctx interface{}) *MockService_GetAllAppRoles_Call {
	return &MockService_GetAllAppRoles_Call{Call: _e.mock.On("GetAllAppRoles", ctx)}
}

func (_c *MockService_GetAllAppRoles_Call) Run(run func(ctx context.Context)) *MockService_GetAllAppRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_GetAllAppRoles_Call) Return(_a0 *[]AppRole, _a1 error) *MockService_GetAllAppRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetAllAppRoles_Call) RunAndReturn(run func(context.Context) (*[]AppRole, error)) *MockService_GetAllAppRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx
func (_m *MockService) GetUser(ctx context.Context) (*UserResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*UserResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *UserResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetUser(ctx interface{}) *MockService_GetUser_Call {
	return &MockService_GetUser_Call{Call: _e.mock.On("GetUser", ctx)}
}

func (_c *MockService_GetUser_Call) Run(run func(ctx context.Context)) *MockService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_GetUser_Call) Return(_a0 *UserResponse, _a1 error) *MockService_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetUser_Call) RunAndReturn(run func(context.Context) (*UserResponse, error)) *MockService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAppRoles provides a mock function with given fields: ctx, userID
func (_m *MockService) GetUserAppRoles(ctx context.Context, userID string) ([]string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAppRoles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetUserAppRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAppRoles'
type MockService_GetUserAppRoles_Call struct {
	*mock.Call
}

// GetUserAppRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockService_Expecter) GetUserAppRoles(ctx interface{}, userID interface{}) *MockService_GetUserAppRoles_Call {
	return &MockService_GetUserAppRoles_Call{Call: _e.mock.On("GetUserAppRoles", ctx, userID)}
}

func (_c *MockService_GetUserAppRoles_Call) Run(run func(ctx context.Context, userID string)) *MockService_GetUserAppRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetUserAppRoles_Call) Return(_a0 []string, _a1 error) *MockService_GetUserAppRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetUserAppRoles_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *MockService_GetUserAppRoles_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *MockService) Login(ctx context.Context, email string, password string) (LoginResponse, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (LoginResponse, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) LoginResponse); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *MockService_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *MockService_Login_Call {
	return &MockService_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *MockService_Login_Call) Run(run func(ctx context.Context, email string, password string)) *MockService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_Login_Call) Return(_a0 LoginResponse, _a1 error) *MockService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Login_Call) RunAndReturn(run func(context.Context, string, string) (LoginResponse, error)) *MockService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, sessionID
func (_m *MockService) Logout(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *MockService_Expecter) Logout(ctx interface{}, sessionID interface{}) *MockService_Logout_Call {
	return &MockService_Logout_Call{Call: _e.mock.On("Logout", ctx, sessionID)}
}

func (_c *MockService_Logout_Call) Run(run func(ctx context.Context, sessionID string)) *MockService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_Logout_Call) Return(_a0 error) *MockService_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Logout_Call) RunAndReturn(run func(context.Context, string) error) *MockService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAppRoleFromUser provides a mock function with given fields: ctx, userID, roleID
func (_m *MockService) RemoveAppRoleFromUser(ctx context.Context, userID string, roleID string) error {
	ret := _m.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAppRoleFromUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RemoveAppRoleFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAppRoleFromUser'
type MockService_RemoveAppRoleFromUser_Call struct {
	*mock.Call
}

// RemoveAppRoleFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - roleID string
func (_e *MockService_Expecter) RemoveAppRoleFromUser(ctx interface{}, userID interface{}, roleID interface{}) *MockService_RemoveAppRoleFromUser_Call {
	return &MockService_RemoveAppRoleFromUser_Call{Call: _e.mock.On("RemoveAppRoleFromUser", ctx, userID, roleID)}
}

func (_c *MockService_RemoveAppRoleFromUser_Call) Run(run func(ctx context.Context, userID string, roleID string)) *MockService_RemoveAppRoleFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_RemoveAppRoleFromUser_Call) Return(_a0 error) *MockService_RemoveAppRoleFromUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RemoveAppRoleFromUser_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_RemoveAppRoleFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
