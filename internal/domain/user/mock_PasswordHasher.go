// Code generated by mockery v2.52.2. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockPasswordHasher is an autogenerated mock type for the PasswordHasher type
type MockPasswordHasher struct {
	mock.Mock
}

type MockPasswordHasher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPasswordHasher) EXPECT() *MockPasswordHasher_Expecter {
	return &MockPasswordHasher_Expecter{mock: &_m.Mock}
}

// Hash provides a mock function with given fields: password
func (_m *MockPasswordHasher) Hash(password string) (string, string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPasswordHasher_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockPasswordHasher_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - password string
func (_e *MockPasswordHasher_Expecter) Hash(password interface{}) *MockPasswordHasher_Hash_Call {
	return &MockPasswordHasher_Hash_Call{Call: _e.mock.On("Hash", password)}
}

func (_c *MockPasswordHasher_Hash_Call) Run(run func(password string)) *MockPasswordHasher_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPasswordHasher_Hash_Call) Return(_a0 string, _a1 string, _a2 error) *MockPasswordHasher_Hash_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPasswordHasher_Hash_Call) RunAndReturn(run func(string) (string, string, error)) *MockPasswordHasher_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: password, hashedPassword, salt
func (_m *MockPasswordHasher) Validate(password string, hashedPassword string, salt string) bool {
	ret := _m.Called(password, hashedPassword, salt)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(password, hashedPassword, salt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPasswordHasher_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockPasswordHasher_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - password string
//   - hashedPassword string
//   - salt string
func (_e *MockPasswordHasher_Expecter) Validate(password interface{}, hashedPassword interface{}, salt interface{}) *MockPasswordHasher_Validate_Call {
	return &MockPasswordHasher_Validate_Call{Call: _e.mock.On("Validate", password, hashedPassword, salt)}
}

func (_c *MockPasswordHasher_Validate_Call) Run(run func(password string, hashedPassword string, salt string)) *MockPasswordHasher_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPasswordHasher_Validate_Call) Return(_a0 bool) *MockPasswordHasher_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPasswordHasher_Validate_Call) RunAndReturn(run func(string, string, string) bool) *MockPasswordHasher_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPasswordHasher creates a new instance of MockPasswordHasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPasswordHasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPasswordHasher {
	mock := &MockPasswordHasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
