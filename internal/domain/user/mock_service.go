// Code generated by mockery v2.52.2. DO NOT EDIT.

package user

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// AssignAppRoleToUser provides a mock function with given fields: ctx, userID, roleID
func (_m *MockService) AssignAppRoleToUser(ctx context.Context, userID string, roleID string) error {
	ret := _m.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for AssignAppRoleToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, username, password, email
func (_m *MockService) CreateUser(ctx context.Context, username string, password string, email string) (*UserResponse, error) {
	ret := _m.Called(ctx, username, password, email)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*UserResponse, error)); ok {
		return rf(ctx, username, password, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *UserResponse); ok {
		r0 = rf(ctx, username, password, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, username, password, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAppRoles provides a mock function with given fields: ctx
func (_m *MockService) GetAllAppRoles(ctx context.Context) (*[]AppRole, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAppRoles")
	}

	var r0 *[]AppRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]AppRole, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]AppRole); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]AppRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx
func (_m *MockService) GetUser(ctx context.Context) (*UserResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*UserResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *UserResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAppRoles provides a mock function with given fields: ctx, userID
func (_m *MockService) GetUserAppRoles(ctx context.Context, userID string) ([]string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAppRoles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *MockService) Login(ctx context.Context, email string, password string) (LoginResponse, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (LoginResponse, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) LoginResponse); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, sessionID
func (_m *MockService) Logout(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAppRoleFromUser provides a mock function with given fields: ctx, userID, roleID
func (_m *MockService) RemoveAppRoleFromUser(ctx context.Context, userID string, roleID string) error {
	ret := _m.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAppRoleFromUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
