// Code generated by mockery v2.52.2. DO NOT EDIT.

package publisher

import (
	context "context"

	post "github.com/redplanettribe/social-media-manager/internal/domain/post"
	mock "github.com/stretchr/testify/mock"
)

// MockPublisherQueue is an autogenerated mock type for the PublisherQueue type
type MockPublisherQueue struct {
	mock.Mock
}

type MockPublisherQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPublisherQueue) EXPECT() *MockPublisherQueue_Expecter {
	return &MockPublisherQueue_Expecter{mock: &_m.Mock}
}

// CountRunning provides a mock function with no fields
func (_m *MockPublisherQueue) CountRunning() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountRunning")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockPublisherQueue_CountRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountRunning'
type MockPublisherQueue_CountRunning_Call struct {
	*mock.Call
}

// CountRunning is a helper method to define mock.On call
func (_e *MockPublisherQueue_Expecter) CountRunning() *MockPublisherQueue_CountRunning_Call {
	return &MockPublisherQueue_CountRunning_Call{Call: _e.mock.On("CountRunning")}
}

func (_c *MockPublisherQueue_CountRunning_Call) Run(run func()) *MockPublisherQueue_CountRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPublisherQueue_CountRunning_Call) Return(_a0 int) *MockPublisherQueue_CountRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPublisherQueue_CountRunning_Call) RunAndReturn(run func() int) *MockPublisherQueue_CountRunning_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function with given fields: ctx, p
func (_m *MockPublisherQueue) Enqueue(ctx context.Context, p *post.PublishPost) {
	_m.Called(ctx, p)
}

// MockPublisherQueue_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockPublisherQueue_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - ctx context.Context
//   - p *post.PublishPost
func (_e *MockPublisherQueue_Expecter) Enqueue(ctx interface{}, p interface{}) *MockPublisherQueue_Enqueue_Call {
	return &MockPublisherQueue_Enqueue_Call{Call: _e.mock.On("Enqueue", ctx, p)}
}

func (_c *MockPublisherQueue_Enqueue_Call) Run(run func(ctx context.Context, p *post.PublishPost)) *MockPublisherQueue_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*post.PublishPost))
	})
	return _c
}

func (_c *MockPublisherQueue_Enqueue_Call) Return() *MockPublisherQueue_Enqueue_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisherQueue_Enqueue_Call) RunAndReturn(run func(context.Context, *post.PublishPost)) *MockPublisherQueue_Enqueue_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockPublisherQueue) Start(ctx context.Context) {
	_m.Called(ctx)
}

// MockPublisherQueue_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPublisherQueue_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPublisherQueue_Expecter) Start(ctx interface{}) *MockPublisherQueue_Start_Call {
	return &MockPublisherQueue_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockPublisherQueue_Start_Call) Run(run func(ctx context.Context)) *MockPublisherQueue_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPublisherQueue_Start_Call) Return() *MockPublisherQueue_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisherQueue_Start_Call) RunAndReturn(run func(context.Context)) *MockPublisherQueue_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockPublisherQueue) Stop() {
	_m.Called()
}

// MockPublisherQueue_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockPublisherQueue_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockPublisherQueue_Expecter) Stop() *MockPublisherQueue_Stop_Call {
	return &MockPublisherQueue_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockPublisherQueue_Stop_Call) Run(run func()) *MockPublisherQueue_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPublisherQueue_Stop_Call) Return() *MockPublisherQueue_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisherQueue_Stop_Call) RunAndReturn(run func()) *MockPublisherQueue_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockPublisherQueue creates a new instance of MockPublisherQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublisherQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublisherQueue {
	mock := &MockPublisherQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
