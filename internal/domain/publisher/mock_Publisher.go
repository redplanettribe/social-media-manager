// Code generated by mockery v2.52.2. DO NOT EDIT.

package publisher

import (
	context "context"

	media "github.com/redplanettribe/social-media-manager/internal/domain/media"
	mock "github.com/stretchr/testify/mock"

	post "github.com/redplanettribe/social-media-manager/internal/domain/post"

	time "time"
)

// MockPublisher is an autogenerated mock type for the Publisher type
type MockPublisher struct {
	mock.Mock
}

type MockPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPublisher) EXPECT() *MockPublisher_Expecter {
	return &MockPublisher_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: ctx, params
func (_m *MockPublisher) Authenticate(ctx context.Context, params any) (string, time.Time, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 string
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, any) (string, time.Time, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, any) string); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, any) time.Time); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, any) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPublisher_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockPublisher_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - params any
func (_e *MockPublisher_Expecter) Authenticate(ctx interface{}, params interface{}) *MockPublisher_Authenticate_Call {
	return &MockPublisher_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, params)}
}

func (_c *MockPublisher_Authenticate_Call) Run(run func(ctx context.Context, params any)) *MockPublisher_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(any))
	})
	return _c
}

func (_c *MockPublisher_Authenticate_Call) Return(_a0 string, _a1 time.Time, _a2 error) *MockPublisher_Authenticate_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPublisher_Authenticate_Call) RunAndReturn(run func(context.Context, any) (string, time.Time, error)) *MockPublisher_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// MemberLookup provides a mock function with given fields: ctx, username
func (_m *MockPublisher) MemberLookup(ctx context.Context, username string) (string, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for MemberLookup")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPublisher_MemberLookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MemberLookup'
type MockPublisher_MemberLookup_Call struct {
	*mock.Call
}

// MemberLookup is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockPublisher_Expecter) MemberLookup(ctx interface{}, username interface{}) *MockPublisher_MemberLookup_Call {
	return &MockPublisher_MemberLookup_Call{Call: _e.mock.On("MemberLookup", ctx, username)}
}

func (_c *MockPublisher_MemberLookup_Call) Run(run func(ctx context.Context, username string)) *MockPublisher_MemberLookup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPublisher_MemberLookup_Call) Return(_a0 string, _a1 error) *MockPublisher_MemberLookup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPublisher_MemberLookup_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockPublisher_MemberLookup_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, _a1, _a2
func (_m *MockPublisher) Publish(ctx context.Context, _a1 *post.PublishPost, _a2 []*media.Media) error {
	ret := _m.Called(ctx, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *post.PublishPost, []*media.Media) error); ok {
		r0 = rf(ctx, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *post.PublishPost
//   - _a2 []*media.Media
func (_e *MockPublisher_Expecter) Publish(ctx interface{}, _a1 interface{}, _a2 interface{}) *MockPublisher_Publish_Call {
	return &MockPublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, _a1, _a2)}
}

func (_c *MockPublisher_Publish_Call) Run(run func(ctx context.Context, _a1 *post.PublishPost, _a2 []*media.Media)) *MockPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*post.PublishPost), args[2].([]*media.Media))
	})
	return _c
}

func (_c *MockPublisher_Publish_Call) Return(_a0 error) *MockPublisher_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPublisher_Publish_Call) RunAndReturn(run func(context.Context, *post.PublishPost, []*media.Media) error) *MockPublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePost provides a mock function with given fields: ctx, _a1, _a2
func (_m *MockPublisher) ValidatePost(ctx context.Context, _a1 *post.PublishPost, _a2 []*media.Media) error {
	ret := _m.Called(ctx, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *post.PublishPost, []*media.Media) error); ok {
		r0 = rf(ctx, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPublisher_ValidatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePost'
type MockPublisher_ValidatePost_Call struct {
	*mock.Call
}

// ValidatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *post.PublishPost
//   - _a2 []*media.Media
func (_e *MockPublisher_Expecter) ValidatePost(ctx interface{}, _a1 interface{}, _a2 interface{}) *MockPublisher_ValidatePost_Call {
	return &MockPublisher_ValidatePost_Call{Call: _e.mock.On("ValidatePost", ctx, _a1, _a2)}
}

func (_c *MockPublisher_ValidatePost_Call) Run(run func(ctx context.Context, _a1 *post.PublishPost, _a2 []*media.Media)) *MockPublisher_ValidatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*post.PublishPost), args[2].([]*media.Media))
	})
	return _c
}

func (_c *MockPublisher_ValidatePost_Call) Return(_a0 error) *MockPublisher_ValidatePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPublisher_ValidatePost_Call) RunAndReturn(run func(context.Context, *post.PublishPost, []*media.Media) error) *MockPublisher_ValidatePost_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPublisher creates a new instance of MockPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublisher {
	mock := &MockPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
