// Code generated by mockery v2.52.2. DO NOT EDIT.

package publisher

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// AddProfileTag provides a mock function with given fields: ctx, platformID, postID, tag
func (_m *MockRepository) AddProfileTag(ctx context.Context, platformID string, postID string, tag string) error {
	ret := _m.Called(ctx, platformID, postID, tag)

	if len(ret) == 0 {
		panic("no return value specified for AddProfileTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, platformID, postID, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_AddProfileTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProfileTag'
type MockRepository_AddProfileTag_Call struct {
	*mock.Call
}

// AddProfileTag is a helper method to define mock.On call
//   - ctx context.Context
//   - platformID string
//   - postID string
//   - tag string
func (_e *MockRepository_Expecter) AddProfileTag(ctx interface{}, platformID interface{}, postID interface{}, tag interface{}) *MockRepository_AddProfileTag_Call {
	return &MockRepository_AddProfileTag_Call{Call: _e.mock.On("AddProfileTag", ctx, platformID, postID, tag)}
}

func (_c *MockRepository_AddProfileTag_Call) Run(run func(ctx context.Context, platformID string, postID string, tag string)) *MockRepository_AddProfileTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRepository_AddProfileTag_Call) Return(_a0 error) *MockRepository_AddProfileTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_AddProfileTag_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockRepository_AddProfileTag_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: ctx
func (_m *MockRepository) FindAll(ctx context.Context) ([]Platform, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []Platform
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Platform, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Platform); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Platform)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) FindAll(ctx interface{}) *MockRepository_FindAll_Call {
	return &MockRepository_FindAll_Call{Call: _e.mock.On("FindAll", ctx)}
}

func (_c *MockRepository_FindAll_Call) Run(run func(ctx context.Context)) *MockRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_FindAll_Call) Return(_a0 []Platform, _a1 error) *MockRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindAll_Call) RunAndReturn(run func(context.Context) ([]Platform, error)) *MockRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) FindByID(ctx context.Context, id string) (*Platform, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *Platform
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Platform, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Platform); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Platform)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockRepository_Expecter) FindByID(ctx interface{}, id interface{}) *MockRepository_FindByID_Call {
	return &MockRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockRepository_FindByID_Call) Run(run func(ctx context.Context, id string)) *MockRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_FindByID_Call) Return(_a0 *Platform, _a1 error) *MockRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindByID_Call) RunAndReturn(run func(context.Context, string) (*Platform, error)) *MockRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultUserID provides a mock function with given fields: ctx, platformID
func (_m *MockRepository) GetDefaultUserID(ctx context.Context, platformID string) (string, error) {
	ret := _m.Called(ctx, platformID)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultUserID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, platformID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, platformID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, platformID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetDefaultUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultUserID'
type MockRepository_GetDefaultUserID_Call struct {
	*mock.Call
}

// GetDefaultUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - platformID string
func (_e *MockRepository_Expecter) GetDefaultUserID(ctx interface{}, platformID interface{}) *MockRepository_GetDefaultUserID_Call {
	return &MockRepository_GetDefaultUserID_Call{Call: _e.mock.On("GetDefaultUserID", ctx, platformID)}
}

func (_c *MockRepository_GetDefaultUserID_Call) Run(run func(ctx context.Context, platformID string)) *MockRepository_GetDefaultUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetDefaultUserID_Call) Return(_a0 string, _a1 error) *MockRepository_GetDefaultUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetDefaultUserID_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockRepository_GetDefaultUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlatformSecrets provides a mock function with given fields: ctx, projectID, socialPlatformID
func (_m *MockRepository) GetPlatformSecrets(ctx context.Context, projectID string, socialPlatformID string) (*string, error) {
	ret := _m.Called(ctx, projectID, socialPlatformID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlatformSecrets")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*string, error)); ok {
		return rf(ctx, projectID, socialPlatformID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *string); ok {
		r0 = rf(ctx, projectID, socialPlatformID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, socialPlatformID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetPlatformSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlatformSecrets'
type MockRepository_GetPlatformSecrets_Call struct {
	*mock.Call
}

// GetPlatformSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - socialPlatformID string
func (_e *MockRepository_Expecter) GetPlatformSecrets(ctx interface{}, projectID interface{}, socialPlatformID interface{}) *MockRepository_GetPlatformSecrets_Call {
	return &MockRepository_GetPlatformSecrets_Call{Call: _e.mock.On("GetPlatformSecrets", ctx, projectID, socialPlatformID)}
}

func (_c *MockRepository_GetPlatformSecrets_Call) Run(run func(ctx context.Context, projectID string, socialPlatformID string)) *MockRepository_GetPlatformSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_GetPlatformSecrets_Call) Return(_a0 *string, _a1 error) *MockRepository_GetPlatformSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetPlatformSecrets_Call) RunAndReturn(run func(context.Context, string, string) (*string, error)) *MockRepository_GetPlatformSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPlatformSecrets provides a mock function with given fields: ctx, platformID, userID
func (_m *MockRepository) GetUserPlatformSecrets(ctx context.Context, platformID string, userID string) (string, error) {
	ret := _m.Called(ctx, platformID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPlatformSecrets")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, platformID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, platformID, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, platformID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetUserPlatformSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPlatformSecrets'
type MockRepository_GetUserPlatformSecrets_Call struct {
	*mock.Call
}

// GetUserPlatformSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - platformID string
//   - userID string
func (_e *MockRepository_Expecter) GetUserPlatformSecrets(ctx interface{}, platformID interface{}, userID interface{}) *MockRepository_GetUserPlatformSecrets_Call {
	return &MockRepository_GetUserPlatformSecrets_Call{Call: _e.mock.On("GetUserPlatformSecrets", ctx, platformID, userID)}
}

func (_c *MockRepository_GetUserPlatformSecrets_Call) Run(run func(ctx context.Context, platformID string, userID string)) *MockRepository_GetUserPlatformSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_GetUserPlatformSecrets_Call) Return(_a0 string, _a1 error) *MockRepository_GetUserPlatformSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetUserPlatformSecrets_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *MockRepository_GetUserPlatformSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// IsSocialNetworkEnabledForProject provides a mock function with given fields: ctx, projectID, socialPlatformID
func (_m *MockRepository) IsSocialNetworkEnabledForProject(ctx context.Context, projectID string, socialPlatformID string) (bool, error) {
	ret := _m.Called(ctx, projectID, socialPlatformID)

	if len(ret) == 0 {
		panic("no return value specified for IsSocialNetworkEnabledForProject")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, projectID, socialPlatformID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, projectID, socialPlatformID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, socialPlatformID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_IsSocialNetworkEnabledForProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSocialNetworkEnabledForProject'
type MockRepository_IsSocialNetworkEnabledForProject_Call struct {
	*mock.Call
}

// IsSocialNetworkEnabledForProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - socialPlatformID string
func (_e *MockRepository_Expecter) IsSocialNetworkEnabledForProject(ctx interface{}, projectID interface{}, socialPlatformID interface{}) *MockRepository_IsSocialNetworkEnabledForProject_Call {
	return &MockRepository_IsSocialNetworkEnabledForProject_Call{Call: _e.mock.On("IsSocialNetworkEnabledForProject", ctx, projectID, socialPlatformID)}
}

func (_c *MockRepository_IsSocialNetworkEnabledForProject_Call) Run(run func(ctx context.Context, projectID string, socialPlatformID string)) *MockRepository_IsSocialNetworkEnabledForProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_IsSocialNetworkEnabledForProject_Call) Return(_a0 bool, _a1 error) *MockRepository_IsSocialNetworkEnabledForProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_IsSocialNetworkEnabledForProject_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockRepository_IsSocialNetworkEnabledForProject_Call {
	_c.Call.Return(run)
	return _c
}

// SetPlatformSecrets provides a mock function with given fields: ctx, projectID, socialPlatformID, secrets
func (_m *MockRepository) SetPlatformSecrets(ctx context.Context, projectID string, socialPlatformID string, secrets string) error {
	ret := _m.Called(ctx, projectID, socialPlatformID, secrets)

	if len(ret) == 0 {
		panic("no return value specified for SetPlatformSecrets")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, projectID, socialPlatformID, secrets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_SetPlatformSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPlatformSecrets'
type MockRepository_SetPlatformSecrets_Call struct {
	*mock.Call
}

// SetPlatformSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - socialPlatformID string
//   - secrets string
func (_e *MockRepository_Expecter) SetPlatformSecrets(ctx interface{}, projectID interface{}, socialPlatformID interface{}, secrets interface{}) *MockRepository_SetPlatformSecrets_Call {
	return &MockRepository_SetPlatformSecrets_Call{Call: _e.mock.On("SetPlatformSecrets", ctx, projectID, socialPlatformID, secrets)}
}

func (_c *MockRepository_SetPlatformSecrets_Call) Run(run func(ctx context.Context, projectID string, socialPlatformID string, secrets string)) *MockRepository_SetPlatformSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRepository_SetPlatformSecrets_Call) Return(_a0 error) *MockRepository_SetPlatformSecrets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_SetPlatformSecrets_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockRepository_SetPlatformSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserPlatformAuthSecretsWithTTL provides a mock function with given fields: ctx, platformID, userID, secrets, ttl
func (_m *MockRepository) SetUserPlatformAuthSecretsWithTTL(ctx context.Context, platformID string, userID string, secrets string, ttl time.Time) error {
	ret := _m.Called(ctx, platformID, userID, secrets, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetUserPlatformAuthSecretsWithTTL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Time) error); ok {
		r0 = rf(ctx, platformID, userID, secrets, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_SetUserPlatformAuthSecretsWithTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserPlatformAuthSecretsWithTTL'
type MockRepository_SetUserPlatformAuthSecretsWithTTL_Call struct {
	*mock.Call
}

// SetUserPlatformAuthSecretsWithTTL is a helper method to define mock.On call
//   - ctx context.Context
//   - platformID string
//   - userID string
//   - secrets string
//   - ttl time.Time
func (_e *MockRepository_Expecter) SetUserPlatformAuthSecretsWithTTL(ctx interface{}, platformID interface{}, userID interface{}, secrets interface{}, ttl interface{}) *MockRepository_SetUserPlatformAuthSecretsWithTTL_Call {
	return &MockRepository_SetUserPlatformAuthSecretsWithTTL_Call{Call: _e.mock.On("SetUserPlatformAuthSecretsWithTTL", ctx, platformID, userID, secrets, ttl)}
}

func (_c *MockRepository_SetUserPlatformAuthSecretsWithTTL_Call) Run(run func(ctx context.Context, platformID string, userID string, secrets string, ttl time.Time)) *MockRepository_SetUserPlatformAuthSecretsWithTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(time.Time))
	})
	return _c
}

func (_c *MockRepository_SetUserPlatformAuthSecretsWithTTL_Call) Return(_a0 error) *MockRepository_SetUserPlatformAuthSecretsWithTTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_SetUserPlatformAuthSecretsWithTTL_Call) RunAndReturn(run func(context.Context, string, string, string, time.Time) error) *MockRepository_SetUserPlatformAuthSecretsWithTTL_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserPlatformSecrets provides a mock function with given fields: ctx, platformID, userID, secrets
func (_m *MockRepository) SetUserPlatformSecrets(ctx context.Context, platformID string, userID string, secrets string) error {
	ret := _m.Called(ctx, platformID, userID, secrets)

	if len(ret) == 0 {
		panic("no return value specified for SetUserPlatformSecrets")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, platformID, userID, secrets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_SetUserPlatformSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserPlatformSecrets'
type MockRepository_SetUserPlatformSecrets_Call struct {
	*mock.Call
}

// SetUserPlatformSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - platformID string
//   - userID string
//   - secrets string
func (_e *MockRepository_Expecter) SetUserPlatformSecrets(ctx interface{}, platformID interface{}, userID interface{}, secrets interface{}) *MockRepository_SetUserPlatformSecrets_Call {
	return &MockRepository_SetUserPlatformSecrets_Call{Call: _e.mock.On("SetUserPlatformSecrets", ctx, platformID, userID, secrets)}
}

func (_c *MockRepository_SetUserPlatformSecrets_Call) Run(run func(ctx context.Context, platformID string, userID string, secrets string)) *MockRepository_SetUserPlatformSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRepository_SetUserPlatformSecrets_Call) Return(_a0 error) *MockRepository_SetUserPlatformSecrets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_SetUserPlatformSecrets_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockRepository_SetUserPlatformSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
