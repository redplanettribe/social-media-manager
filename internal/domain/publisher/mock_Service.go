// Code generated by mockery v2.52.2. DO NOT EDIT.

package publisher

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// AddProfileTagToPost provides a mock function with given fields: ctx, projectID, postID, platformID, userPlatformID
func (_m *MockService) AddProfileTagToPost(ctx context.Context, projectID string, postID string, platformID string, userPlatformID string) error {
	ret := _m.Called(ctx, projectID, postID, platformID, userPlatformID)

	if len(ret) == 0 {
		panic("no return value specified for AddProfileTagToPost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, projectID, postID, platformID, userPlatformID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_AddProfileTagToPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProfileTagToPost'
type MockService_AddProfileTagToPost_Call struct {
	*mock.Call
}

// AddProfileTagToPost is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - platformID string
//   - userPlatformID string
func (_e *MockService_Expecter) AddProfileTagToPost(ctx interface{}, projectID interface{}, postID interface{}, platformID interface{}, userPlatformID interface{}) *MockService_AddProfileTagToPost_Call {
	return &MockService_AddProfileTagToPost_Call{Call: _e.mock.On("AddProfileTagToPost", ctx, projectID, postID, platformID, userPlatformID)}
}

func (_c *MockService_AddProfileTagToPost_Call) Run(run func(ctx context.Context, projectID string, postID string, platformID string, userPlatformID string)) *MockService_AddProfileTagToPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockService_AddProfileTagToPost_Call) Return(_a0 error) *MockService_AddProfileTagToPost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_AddProfileTagToPost_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockService_AddProfileTagToPost_Call {
	_c.Call.Return(run)
	return _c
}

// Authenticate provides a mock function with given fields: ctx, platformID, projectID, userID, params
func (_m *MockService) Authenticate(ctx context.Context, platformID string, projectID string, userID string, params any) error {
	ret := _m.Called(ctx, platformID, projectID, userID, params)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, any) error); ok {
		r0 = rf(ctx, platformID, projectID, userID, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockService_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - platformID string
//   - projectID string
//   - userID string
//   - params any
func (_e *MockService_Expecter) Authenticate(ctx interface{}, platformID interface{}, projectID interface{}, userID interface{}, params interface{}) *MockService_Authenticate_Call {
	return &MockService_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, platformID, projectID, userID, params)}
}

func (_c *MockService_Authenticate_Call) Run(run func(ctx context.Context, platformID string, projectID string, userID string, params any)) *MockService_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(any))
	})
	return _c
}

func (_c *MockService_Authenticate_Call) Return(_a0 error) *MockService_Authenticate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Authenticate_Call) RunAndReturn(run func(context.Context, string, string, string, any) error) *MockService_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailableSocialNetworks provides a mock function with given fields: ctx
func (_m *MockService) GetAvailableSocialNetworks(ctx context.Context) ([]Platform, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableSocialNetworks")
	}

	var r0 []Platform
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Platform, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Platform); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Platform)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetAvailableSocialNetworks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableSocialNetworks'
type MockService_GetAvailableSocialNetworks_Call struct {
	*mock.Call
}

// GetAvailableSocialNetworks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetAvailableSocialNetworks(ctx interface{}) *MockService_GetAvailableSocialNetworks_Call {
	return &MockService_GetAvailableSocialNetworks_Call{Call: _e.mock.On("GetAvailableSocialNetworks", ctx)}
}

func (_c *MockService_GetAvailableSocialNetworks_Call) Run(run func(ctx context.Context)) *MockService_GetAvailableSocialNetworks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_GetAvailableSocialNetworks_Call) Return(_a0 []Platform, _a1 error) *MockService_GetAvailableSocialNetworks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetAvailableSocialNetworks_Call) RunAndReturn(run func(context.Context) ([]Platform, error)) *MockService_GetAvailableSocialNetworks_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublishPostInfo provides a mock function with given fields: ctx, projectID, postID, platformID
func (_m *MockService) GetPublishPostInfo(ctx context.Context, projectID string, postID string, platformID string) (*PublishPostInfo, error) {
	ret := _m.Called(ctx, projectID, postID, platformID)

	if len(ret) == 0 {
		panic("no return value specified for GetPublishPostInfo")
	}

	var r0 *PublishPostInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*PublishPostInfo, error)); ok {
		return rf(ctx, projectID, postID, platformID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *PublishPostInfo); ok {
		r0 = rf(ctx, projectID, postID, platformID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PublishPostInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, postID, platformID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetPublishPostInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublishPostInfo'
type MockService_GetPublishPostInfo_Call struct {
	*mock.Call
}

// GetPublishPostInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - platformID string
func (_e *MockService_Expecter) GetPublishPostInfo(ctx interface{}, projectID interface{}, postID interface{}, platformID interface{}) *MockService_GetPublishPostInfo_Call {
	return &MockService_GetPublishPostInfo_Call{Call: _e.mock.On("GetPublishPostInfo", ctx, projectID, postID, platformID)}
}

func (_c *MockService_GetPublishPostInfo_Call) Run(run func(ctx context.Context, projectID string, postID string, platformID string)) *MockService_GetPublishPostInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_GetPublishPostInfo_Call) Return(_a0 *PublishPostInfo, _a1 error) *MockService_GetPublishPostInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetPublishPostInfo_Call) RunAndReturn(run func(context.Context, string, string, string) (*PublishPostInfo, error)) *MockService_GetPublishPostInfo_Call {
	_c.Call.Return(run)
	return _c
}

// PublishPostToAssignedSocialNetworks provides a mock function with given fields: ctx, projecID, postID
func (_m *MockService) PublishPostToAssignedSocialNetworks(ctx context.Context, projecID string, postID string) error {
	ret := _m.Called(ctx, projecID, postID)

	if len(ret) == 0 {
		panic("no return value specified for PublishPostToAssignedSocialNetworks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projecID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_PublishPostToAssignedSocialNetworks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishPostToAssignedSocialNetworks'
type MockService_PublishPostToAssignedSocialNetworks_Call struct {
	*mock.Call
}

// PublishPostToAssignedSocialNetworks is a helper method to define mock.On call
//   - ctx context.Context
//   - projecID string
//   - postID string
func (_e *MockService_Expecter) PublishPostToAssignedSocialNetworks(ctx interface{}, projecID interface{}, postID interface{}) *MockService_PublishPostToAssignedSocialNetworks_Call {
	return &MockService_PublishPostToAssignedSocialNetworks_Call{Call: _e.mock.On("PublishPostToAssignedSocialNetworks", ctx, projecID, postID)}
}

func (_c *MockService_PublishPostToAssignedSocialNetworks_Call) Run(run func(ctx context.Context, projecID string, postID string)) *MockService_PublishPostToAssignedSocialNetworks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_PublishPostToAssignedSocialNetworks_Call) Return(_a0 error) *MockService_PublishPostToAssignedSocialNetworks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_PublishPostToAssignedSocialNetworks_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_PublishPostToAssignedSocialNetworks_Call {
	_c.Call.Return(run)
	return _c
}

// PublishPostToSocialNetwork provides a mock function with given fields: ctx, projectID, postID, platformID
func (_m *MockService) PublishPostToSocialNetwork(ctx context.Context, projectID string, postID string, platformID string) error {
	ret := _m.Called(ctx, projectID, postID, platformID)

	if len(ret) == 0 {
		panic("no return value specified for PublishPostToSocialNetwork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, projectID, postID, platformID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_PublishPostToSocialNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishPostToSocialNetwork'
type MockService_PublishPostToSocialNetwork_Call struct {
	*mock.Call
}

// PublishPostToSocialNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - platformID string
func (_e *MockService_Expecter) PublishPostToSocialNetwork(ctx interface{}, projectID interface{}, postID interface{}, platformID interface{}) *MockService_PublishPostToSocialNetwork_Call {
	return &MockService_PublishPostToSocialNetwork_Call{Call: _e.mock.On("PublishPostToSocialNetwork", ctx, projectID, postID, platformID)}
}

func (_c *MockService_PublishPostToSocialNetwork_Call) Run(run func(ctx context.Context, projectID string, postID string, platformID string)) *MockService_PublishPostToSocialNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_PublishPostToSocialNetwork_Call) Return(_a0 error) *MockService_PublishPostToSocialNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_PublishPostToSocialNetwork_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockService_PublishPostToSocialNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePostForAssignedSocialNetworks provides a mock function with given fields: ctx, projecID, postID
func (_m *MockService) ValidatePostForAssignedSocialNetworks(ctx context.Context, projecID string, postID string) error {
	ret := _m.Called(ctx, projecID, postID)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePostForAssignedSocialNetworks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projecID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_ValidatePostForAssignedSocialNetworks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePostForAssignedSocialNetworks'
type MockService_ValidatePostForAssignedSocialNetworks_Call struct {
	*mock.Call
}

// ValidatePostForAssignedSocialNetworks is a helper method to define mock.On call
//   - ctx context.Context
//   - projecID string
//   - postID string
func (_e *MockService_Expecter) ValidatePostForAssignedSocialNetworks(ctx interface{}, projecID interface{}, postID interface{}) *MockService_ValidatePostForAssignedSocialNetworks_Call {
	return &MockService_ValidatePostForAssignedSocialNetworks_Call{Call: _e.mock.On("ValidatePostForAssignedSocialNetworks", ctx, projecID, postID)}
}

func (_c *MockService_ValidatePostForAssignedSocialNetworks_Call) Run(run func(ctx context.Context, projecID string, postID string)) *MockService_ValidatePostForAssignedSocialNetworks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_ValidatePostForAssignedSocialNetworks_Call) Return(_a0 error) *MockService_ValidatePostForAssignedSocialNetworks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ValidatePostForAssignedSocialNetworks_Call) RunAndReturn(run func(context.Context, string, string) error) *MockService_ValidatePostForAssignedSocialNetworks_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePostForSocialNetwork provides a mock function with given fields: ctx, projectID, postID, platformID
func (_m *MockService) ValidatePostForSocialNetwork(ctx context.Context, projectID string, postID string, platformID string) error {
	ret := _m.Called(ctx, projectID, postID, platformID)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePostForSocialNetwork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, projectID, postID, platformID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_ValidatePostForSocialNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePostForSocialNetwork'
type MockService_ValidatePostForSocialNetwork_Call struct {
	*mock.Call
}

// ValidatePostForSocialNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - postID string
//   - platformID string
func (_e *MockService_Expecter) ValidatePostForSocialNetwork(ctx interface{}, projectID interface{}, postID interface{}, platformID interface{}) *MockService_ValidatePostForSocialNetwork_Call {
	return &MockService_ValidatePostForSocialNetwork_Call{Call: _e.mock.On("ValidatePostForSocialNetwork", ctx, projectID, postID, platformID)}
}

func (_c *MockService_ValidatePostForSocialNetwork_Call) Run(run func(ctx context.Context, projectID string, postID string, platformID string)) *MockService_ValidatePostForSocialNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_ValidatePostForSocialNetwork_Call) Return(_a0 error) *MockService_ValidatePostForSocialNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ValidatePostForSocialNetwork_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockService_ValidatePostForSocialNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
