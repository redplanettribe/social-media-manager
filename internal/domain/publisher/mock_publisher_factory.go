// Code generated by mockery v2.52.2. DO NOT EDIT.

package publisher

import mock "github.com/stretchr/testify/mock"

// MockPublisherFactory is an autogenerated mock type for the PublisherFactory type
type MockPublisherFactory struct {
	mock.Mock
}

// Create provides a mock function with given fields: platform, secrets
func (_m *MockPublisherFactory) Create(platform string, secrets string) (Publisher, error) {
	ret := _m.Called(platform, secrets)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 Publisher
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (Publisher, error)); ok {
		return rf(platform, secrets)
	}
	if rf, ok := ret.Get(0).(func(string, string) Publisher); ok {
		r0 = rf(platform, secrets)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Publisher)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(platform, secrets)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockPublisherFactory creates a new instance of MockPublisherFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublisherFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublisherFactory {
	mock := &MockPublisherFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
