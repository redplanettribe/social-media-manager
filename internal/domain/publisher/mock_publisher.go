// Code generated by mockery v2.52.2. DO NOT EDIT.

package publisher

import (
	context "context"

	media "github.com/redplanettribe/social-media-manager/internal/domain/media"
	mock "github.com/stretchr/testify/mock"

	post "github.com/redplanettribe/social-media-manager/internal/domain/post"

	time "time"
)

// MockPublisher is an autogenerated mock type for the Publisher type
type MockPublisher struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: ctx, params
func (_m *MockPublisher) Authenticate(ctx context.Context, params interface{}) (string, time.Time, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 string
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (string, time.Time, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) string); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) time.Time); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, interface{}) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Publish provides a mock function with given fields: ctx, _a1, _a2
func (_m *MockPublisher) Publish(ctx context.Context, _a1 *post.PublishPost, _a2 []*media.Media) error {
	ret := _m.Called(ctx, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *post.PublishPost, []*media.Media) error); ok {
		r0 = rf(ctx, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidatePost provides a mock function with given fields: ctx, _a1, _a2
func (_m *MockPublisher) ValidatePost(ctx context.Context, _a1 *post.PublishPost, _a2 []*media.Media) error {
	ret := _m.Called(ctx, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *post.PublishPost, []*media.Media) error); ok {
		r0 = rf(ctx, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockPublisher creates a new instance of MockPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublisher {
	mock := &MockPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
